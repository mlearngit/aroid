1、2网络编程（概述）

1.找到对方IP
2.数据要发送到对方指定的应用程序上。为了标识这些应用程序，
所以要给这些网络应用程序都用数字进行标识。
为了方便称呼这个数字，叫做“端口”（逻辑端口）

3.定义通信规则，这个通讯规则称为协议。
国际组织定义了通用协议TCP/IP

主机1                   主机2

QQ------------------->QQ(端口4000)

Feiq----------------->Feiq(端口：2900)





3.网络编程（网络模型）

OSI参考模型			TCP/IP参考模型
	应用层				
	表示层				应用层
	会话层
	
	
	传输层				传输层
	
	网络层				网际层
	
	
	数据链路层				主
	物理层				机至网络层

	
当发送方需要向对方发数据时，这个数据首先会从应用层向下一层，层层加标识（称之会数据封装）
一直到底部的物理层，数据将通过网线的形式发出去；然后进入对方主机的物理层，再上向，层层
识别对应的标识，最后把数据传到最上面的应用层，对方才能读取到。

数据向下加标识，称为“数据封包”，，另一边识别标识，称为“数据拆包”

我们学习网络编程就是在网际层和传输层这块

而传输层最常见协议就是TCP和UDP
网际层最常见的协议就是IP
应用层用的协议是HTTP和FTP
	
	

4.网络编程（IP地址）

一般以IP为主，因为主机名需要解析
 
 import java.net.*;

class IPDemo{
	public static void main(String[] args)throws Exception{
		//InetAddress i =InetAddress.getLocalHost();
		//System.out.println(i.toString()); //获取本机的名称和IP地址

		
		//名称和IP地址分开获取的方法
		//System.out.println("address:"+i.getHostAddress());  //获取IP地址
		//System.out.println("name:"+i.getHostName());  //获取主机名


		//通过名称，查看其它的IP地址（例如：百度可能会有多台主机）
		InetAddress ia=InetAddress.getByName("www.baidu.com");
		System.out.println("address:"+ia.getHostAddress());
		System.out.println("name:"+ia.getHostName());
	}
}





5.网络编程（TCP和UDP）

IP地址：(IP地址封装的对象是InetAddress)
	网络中设备的标识
	不易记忆，可用主机名
	本地回环地址：127.0.0.1   主机名：localhost
	
端口号：
	用于标识进程的逻辑地址，不同进程的标识
	有效端口：0~65535 ，其中0~1024系统使用或保留端口
	
传输协议：
	通讯的规则
	常见协议：TCP，UDP
	
	
UDP：（固话机、聊天、视频会议时因为速度很快，就算有数据损失也没什么）
1.将数据及源和目的封装成数据包，不需要建立连接
2.每个数据包的大小限制在64K内
3.因无连接，是不可靠协议
4.不需要建立连接，但速度快.


TCP:（打电话）
1.建立接连，形成传输数据的通道。
2.在连接中进行大数据量传输
3.通过三次握手完成连接，是可靠协议（比如，打电话：在吗（1次），我在（2次），我知道你在了（3次））
4.必须建立连接，效率会稍低








6.网络编程（Socket）

需求：通过udp传输方式，将一段文字数据发送出去。

思路：
1.建立udpsocket服务。
2.提供数据，并将数据封装到数据包 .
3.通过socket服务的发送功能，将数据包发出去。
4.关闭资源。

ps:学习socket主要记住步骤，其它的直接查API


Socket就是为网络服务提供的一种机制。
通信的两端都有Socket
网络通信其实就是Socket间通信
数据在两个Socket间通过IO传输
ps:Socket相当于码头（港口），可以让两边的码头的货物通过船运输





7.网络编程（Udp-发送端）

import java.net.*;

class UdpSend{
	public static void main(String[] args)throws Exception{
	
		//1.创建udp服务，通过DatagramSokcet对象
		DatagramSocket ds=new DatagramSocket();
		
		//2.确定数据，并封装成数据包 DatagramPacket(bute[] buf, int length, InetAddress address, int port);
		byte[] buf="udp ge men lai le".getBytes();
		
		//3.通过socket服务，将已有的数据包发送出去，通过send方法
		//注意：如果IP地址最后写的255的话，那么可以把数据发到局域网内的任意机上都能收到（只要对方接收端开着且监听的端口存在）
		DatagramPacket dp=new DatagramPacket(buf,buf.length,InetAddress.getByName("192.168.1.103"),10000);
		
		4.关闭资源
		ds.send(dp);

		ds.close();
	}
}




8.网络编程（Udp-接收端）

需求：
定义一个应用程序，用于接收udp协议传输的数据并处理。

定义udp的接收端。

思路：
1.定义udpsocket服务，通过会监听一个端口。其实就是给这个接收网络应用程序定义数字标识。
	方便于明确哪些数据过来该应用程序可以处理。

2.定义一个数据包，因为要存储接收到的字节数据。
因为数据包对象中有更多功能可以提取字节数据中不同数据信息。

3.通过socket服务的receive方法将收到的数据存入已定义好的数据包中。

4.通过数据包对象的特有功能。将这些不同的数据取出，打印在控制台上。

5.关闭资源。	





class UdpRece{
	public static void main(String[] args)throws Exception{
	
		//1.创建udp socket ,建立端点
		DatagramSocket ds=new DatagramSocket(10000);

		//定义数据包，有于存储数据。
		byte[] buf=new byte[1024];
		DatagramPacket  dp =new DatagramPacket(buf,buf.length);

		//3.通过服务的receive方法接收到数据存入数据包中
		ds.receive(dp);

		
		//4.通过数据包的方法获取其中的数据。
		String ip=dp.getAddress().getHostAddress();

		String data=new String(dp.getData(),0,dp.getLength());

		int port=dp.getPort();

		System.out.println(ip+":"+data+":"+port);

		//4.关闭资源
		ds.close();
	}
} 

（当不在发送端指定端口时，在接收端收到的port是系统随机给发送端分配的一个端口号）
为什么每次接收到的端口号会变化呢？是因为之前那个端口可能还没有被释放（还被占用着），因为就重新分配新端口

如果不想让系统给发送端分配port，可以直接自己任意给填入一个端口（注意，该端口当前没有被占用，
否则会报异常：java.net.BindException: Address already in use: Cannot bind）


result:

E:\learnjava\net>java UdpRece
192.168.1.103:udp ge men lai le:57193

E:\learnjava\net>java UdpRece
192.168.1.103:udp ge men lai le:57194

E:\learnjava\net>java UdpRece
192.168.1.103:udp ge men lai le:57195






9.网络编程（UDP-键盘录入方式数据）

import java.net.*;
import java.io.*;

class UdpSend2{
	public static void main(String[] args)throws Exception{
		DatagramSocket ds=new DatagramSocket();

		BufferedReader  bufr=new BufferedReader(new InputStreamReader(System.in));

		String line=null;

		while((line=bufr.readLine())!=null){//其实这里readLine（read）也是阻塞式方式，等待用户输入呢
			if("886".equals(line)){
				break;
			}
			byte[] buf=line.getBytes();
			DatagramPacket  dp=new DatagramPacket(buf,buf.length,InetAddress.getByName("192.168.1.103"),10101);

			ds.send(dp);
		}
		ds.close();
	}
}



class UdpReceive2{
	public static void main(String[] args)throws Exception{
		
	//注意不要把此句放入while里面了，否则会出现BindException异常，原因是当循环第二变回来时再次建立10101端口发现已经占用了
		DatagramSocket ds=new DatagramSocket(10101);
		
		while(true){
		//1024字节=1K，如果这里接收的数据比较大，可以设置成64K,【因为数据包大小是限制在64K内】，在发送时一个小包一个小包的发。
			byte[] buf=new byte[1024];
			DatagramPacket dp=new DatagramPacket(buf,buf.length);

			ds.receive(dp);//阻塞式方法（不停的等着接收数据）

			String ip=dp.getAddress().getHostAddress();
			String data=new String(dp.getData(),0,dp.getLength());
			System.out.println(ip+":"+data);

		}
		//由于接收端需要不停的接收数据，所以这里一般不关闭资源。
	}
}











10.网络编程（UDP-聊天）



编写一个聊天程序。
有收数据的部分，和发数据的部分。
这两部分需要同时执行。
那就需要用到多线程技术。
一个线程控制收，一个线程控制发。

因为收和发动作不一致，所以要定义两个run方法。
而且这两个方法要封装到不同类中。

import java.net.*;
import java.io.*;


class Send implements Runnable{
	DatagramSocket ds;
	Send(DatagramSocket ds){
		this.ds=ds;
	}
	public void run(){
		try{
			BufferedReader  bufr=new BufferedReader(new InputStreamReader(System.in));
			String line=null;
			while((line=bufr.readLine())!=null){
				if("886".equals(line)){
					break;
				}
				byte[] buf=line.getBytes();
				DatagramPacket  dp=new DatagramPacket(buf,buf.length,InetAddress.getByName("192.168.1.103"),10001);
				ds.send(dp);
			}
		}catch(Exception e){
			throw new RuntimeException("send fail!!");
		}
	}
}



class Rece implements Runnable{
	DatagramSocket ds;
	Rece(DatagramSocket ds){
		this.ds=ds;
	}
	public void run(){
		try{
			while(true){
				byte[] buf=new byte[1024];
				DatagramPacket dp=new DatagramPacket(buf,buf.length);
				ds.receive(dp);

				String ip=dp.getAddress().getHostAddress();
				String data=new String(dp.getData(),0,dp.getLength());
				System.out.println(ip+":"+data);
			}
		}catch(Exception e){
			throw new RuntimeException("rece fail!!");
		}
	}
}


class ChatDemo{
	public static void main(String[] args)throws Exception{
		DatagramSocket sendSocket =new DatagramSocket();
		DatagramSocket receSocket =new DatagramSocket(10001);
		new Thread(new Send(sendSocket)).start();
		new Thread(new Rece(receSocket)).start();
	}
}








11.网络编程（TCP传输）

演示tcp传输

1.tcp分客户端和服务端。
2.客户端对应的对象是socket。
	服务端对应的对象是ServerSocket。
	
	
客户端端：
通过查阅socket对象，发现在该对象建立时，就可以去连接指定主机。
因为tcp是面向连接的，所以在建立socket服务时，
就要有服务端存在，并连接成功。形成通路后，在该通道进行数据的传输。

步骤：
1.创建Socket服务。并指定要连接的主机和端口


import java.io.*;
import java.net.*;

class TcpClient{
	public static void main(String[] args)throws Exception{
	
		//创建客户端的socket服务。指定目的主机和端口
		Socket s=new Socket("192.168.1.103",10003);
		
		//为了发送数据，应该获取socket流中的输出流。
		OutputStream out=s.getOutputStream();

		out.write("tcp ge men lai le".getBytes());

		s.close();
	}
}



需求：定义端点接收数据并打印在控制台上。

服务端：
1.建立服务端的socket服务，ServerSocket；
	并监听一个端口。
2.获取连接过来的客户端对象。
	通过ServerSocket的accept方法。没有连接就会等。所以这个方法是阻塞式的。
3.客户端如果发过来数据，那么服务端要使用对应的客户端对象，并获取到该客户端对象的读取流来读取发过来的数据。
4.关闭服务端（可选）


class TcpServer{
	public static void main(String[] args)throws Exception{
	
		//建立服务端socket服务。并监听一个端口。
		ServerSocket ss=new ServerSocket(10003);

		//通过accpet方法获取连接过来的客户端对象。
		Socket s=ss.accept();

		String ip=s.getInetAddress().getHostAddress();
		System.out.println(ip+"...connected");
		
		//获取客户端发送过来的数据，那么要使用客户端端对象的读取流来读取数据
		InputStream in=s.getInputStream();

		byte[] buf=new byte[1024];
		int len=in.read(buf);

		System.out.println(new String(buf,0,len));

		s.close();	//关闭客户端.
		ss.close();
	}
}






12.网络编程（TCP传输2）

演示tcp的传输的客户端和服务端的互访。

需求：客户端给服务端发送数据，服务端收到后，给客户端反馈信息。



客户端：
1.建立socket服务。指定要连接主机和端口。
2.获取socket流中的输出流。将数据写到该流中。通过网络发送给服务端。
3.获取socket流中的输入流。将服务端反馈的数据获取到，并打印。
4.关闭客户端资源。

import java.io.*;
import java.net.*;

class TcpClient2{
	public static void main(String[] args)throws Exception{
		Socket s=new Socket("192.168.1.103",10004);

		OutputStream out=s.getOutputStream();

		out.write("hello,server".getBytes());



		InputStream  in=s.getInputStream();

		byte[] buf=new byte[1024];

		int len=in.read(buf);

		System.out.println(new String(buf,0,len));

		s.close();
	}
}



class TcpServer2{
	public static void main(String[] args)throws Exception{
		ServerSocket ss=new ServerSocket(10004);

		Socket s=ss.accept();

		String ip=s.getInetAddress().getHostAddress();
		System.out.println(ip+"...connected");

		InputStream in=s.getInputStream();

		byte[] buf=new byte[1024];

		int len=in.read(buf);

		System.out.println(new String(buf,0,len));



		OutputStream  out=s.getOutputStream();

		//Thread.sleep(10000); //为了证明在客户端中当没有接收了服务端反馈的数据时，会一直等着(read方法)接收。
		
		out.write("Hello,I have reviced".getBytes());

		s.close();
		ss.close();
	}
}







13.网络编程（TCP练习）


需求：建立一个文本转换服务器。
客户端给服务端发送文本，服务端会将文本转成大写并返回给客户端。
而且客户端可以不断的进行文本转换。当客户端输入over时，转换结束。


分析：
客户端：
既然是操作设备上的数据，那么就可以使用io技术，并按照io的操作规律来思考。
源：键盘录入。
目的：网络设备，网络输出流。
而且操作的是文本数据。可以选择字符流。

步骤：
1.建立服务端
2.获取键盘录入。
3.将数据发给服务端
4.获取服务端返回的大写数据。
5.结束，关资源

都是文本数据，可以使用字符流进行操作，同时提高效率，加入缓冲



import java.io.*;
import java.net.*;

class TransClient{
	public static void main(String[] args)throws Exception{

		Socket s=new Socket("192.168.1.103",10005);

		//定义读取键盘数据的流对象
		BufferedReader bufr=
			new BufferedReader(new InputStreamReader(System.in));

		//定义目的，将数据写入到socket输出流。发给服务端。
		//BufferedWriter bufOut=
		//	new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));
			PrintWriter out=new PrintWriter(s.getOutputStream(),true);

		//定义一个socket读取流，读取服务端返回的大写信息。
		BufferedReader bufIn=
			new BufferedReader(new InputStreamReader(s.getInputStream()));

		String line=null;

		while((line=bufr.readLine())!=null){

			if("over".equals(line)){
				break;
			}
			out.println(line);
			//bufOut.write(line);
			//bufOut.newLine();
			//bufOut.flush();

			String str=bufIn.readLine();
			System.out.println("server:"+str);
		
		}

		bufr.close();
		s.close();
	}
}





服务端：
源：socket读取流。
目的：socket输出流
都是文本，装饰。

class TransServer{
	public static void main(String[] args)throws Exception{
		ServerSocket ss=new ServerSocket(10005);

		Socket s=ss.accept();

		String ip=s.getInetAddress().getHostAddress();
		System.out.println(ip+"...connected");

		//读取sokcet读取流中的数据
		BufferedReader bufIn=
			new BufferedReader(new InputStreamReader(s.getInputStream()));

		//目的。socket输出流。将大写数据写入到socket输出流，并发送给客户端。
	//	BufferedWriter bufOut=
	//		new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));
		PrintWriter out=new PrintWriter(s.getOutputStream(),true);


		String line=null;

		while((line=bufIn.readLine())!=null){
			System.out.println(line);

			out.println(line.toUpperCase());
			//bufOut.write(line.toUpperCase());
			//bufOut.newLine();
			//bufOut.flush();
		}
		s.close();
		ss.close();
	}
}


该例子出现的问题：
现象：
客户端和服务端都在莫名的等待。
为什么呢？
因为客户端和服务端都有阻塞式方法。这些方法没有读到结束标记，那么就一直等 
而导致两端，都在等待