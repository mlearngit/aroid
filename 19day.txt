1.BufferedWriter


import java.io.*;

class BufferedWriterDemo{
	public static void main(String[] args)throws IOException{
	
		//创建一个字符写入流对象。
		FileWriter fw=new FileWriter("buf.txt");

		//为了提高字符写入流效率，加入了缓冲技术。
		//只要将需要被提高效率的流对象作为参数传递给缓冲区的构造函数即可。
		BufferedWriter bufw=new BufferedWriter(fw);

		for(int x=1; x<5; x++){
			bufw.write("abcde"+x);
			bufw.newLine();
			bufw.flush();	
		}
		
		//记住，只要用到缓冲区，就要记得刷新。
		//bufw.flush();
		
		//其实关闭缓冲区，就是在关闭缓冲区中的流对象。
		bufw.close();

		
	}
}





2.BufferedReader


字符读取流缓冲区：
该缓冲区提供了一个一次读一行的方法readLine，方便于对文本数据的获取。
当返回null时，表示读到文件末尾。

import java.io.*;

class BufferedReaderDemo{
	public static void main(String[] args)throws IOException{
	
		//创建一个读取流对象和文件相关联
		FileReader fr=new FileReader("buf.txt");

		//为了提高效率，加入缓冲技术，将字符读取流对象传递给缓冲对象构造函数
		BufferedReader bufr=new BufferedReader(fr);

		String line=null;

		while((line=bufr.readLine())!=null){
			System.out.println(line);
		}

		bufr.close();
	}
}




3.通过缓冲区复制文本文件


字符读取流缓冲区：
该缓冲区提供了一个一次读一行的方法readLine，方便于对文本数据的获取。
当返回null时，表示读到文件末尾。

readLine方法返回的时候只返回回车符之前的数据内容。并不返回回车符。

import java.io.*;

class CopyTextByBuf{
	public static void main(String[] args){
		BufferedWriter bfw=null;
		BufferedReader bfr=null;

		try{
			bfr=new BufferedReader(new FileReader("FileReaderDemo8.java"));
			bfw=new BufferedWriter(new FileWriter("g:\\filereader_copy.txt"));

			String str=null;
			while((str=bfr.readLine())!=null){
				bfw.write(str);
				bfw.newLine();
				bfw.flush();
			}

		}catch(IOException e){
			throw new RuntimeException("du qu file");
		}
		finally{
			try{
				if(bfr!=null){
					bfr.close();
				}
			}catch(IOException e){

			}
			try{
				if(bfw!=null){
					bfw.close();
				}
			}catch(IOException e){
				
			}
		}
	}
}



4.readLine方法的原理：

无论是读一行，获取读取多个字符。其实最终都是在硬盘上一个一个读取。所以最终
使用的还是read方法一次读一个的方法。

在windows系统中换行符用\r\n表示，当read读到这个换行符时就会把换行符之前的内容以
字符串的形式返回回去。





5.MyBufferedReader

明白了BufferedReader类中特有方法readLine的原理后，
可以自定义一个类中包含一个功能和readline一致的方法。
来模拟一下BufferedReader


import java.io.*;

class MyBufferedReader{
	private FileReader r;
	MyBufferedReader(FileReader r){
		this.r=r;
	}

	//可以一次读一行数据的方法。
	public String myReadLine()throws IOException{
	
		//定义一个临时容器，原BufferedReader封装的是字符数组。
		//为了演示方便。定义一个StringBuilder容器，因为最终还是要将数据变成字符串。
		StringBuilder sb=new StringBuilder();

		int ch=0;

		while((ch=r.read())!=-1){
			if(ch=='\r')
				continue;
			if(ch=='\n')
				return sb.toString();
			else
				sb.append((char)ch);
		}
		if(sb.length()!=0)
			return sb.toString();
		return null;
	}

	public void myClose()throws IOException{
		r.close();
	}

}




6.装饰设计模式


装饰设计模式：
当想要对已有的对象进行功能增加时，
可以自定义类，将已有对象传入，基于已有的功能，并提供加强功能。
那么自定义的该类称为装饰类。

装饰类通常会通过构造方法接收被装饰的对象。
并基于被装饰的对象的功能，提供更强的功能。


class Person{
	public void chifan(){
		System.out.println("吃饭");
	}
}

class SuperPerson{
	private Person p;
	
	SuperPerson(Person p){
		this.p=p;
	}
	
	public void superChifan(){
		System.out.println("开胃酒");
		p.chifan();
		System.out.println("甜点");
		System.out.println("来一根");
	}
}

class  PersonDemo{
	public static void main(String[] args){
		Person p=new Person();
		
		//p.chifan();
		
		SuperPerson sp=new SuperPerson(p);
		sp.superChifan();
	}
}






7.装饰和继承的区别

MyReader //专门用于读取数据的类。
	|--MyTextReader
		|--MyBufferTextReader
	|--MyMediaReader
		|--MyBufferMediaReader
	|--MyDataReader
		|--MyBufferDataReader
		
		
class MyBufferReader{
	MyBufferReader(MyTextReader text){
	}
	MyBufferReader(MyMediaReader media){
	}
}

上面这个类扩展性很差。
找到其参数的共同类型，通过多态的形式，可以提高扩展性。

class MyBufferReader extends MyReader{
	MyBufferReader(MyReader r){
	}
}

MyReader  //专门用于读取数据的类。
	|--MyTextReader
	|--MyMediaReader
	|--MyDataReader
	|--MyBufferReader
	
	
装饰模式比继承要灵活，避免了继承体系的臃肿。
而且降低了类于类之间的关系。

装饰类因为增加已有对象，具备的功能和已有的是相同的，只不过提供了更强功能。
所以装饰类和被装饰类通过是都属于一个体系中的。







8.自定义装饰类

import java.io.*;

class MyBufferedReader extends Reader{
	private Reader r;
	MyBufferedReader(Reader r){
		this.r=r;
	}

	public String myReadLine()throws IOException{
		StringBuilder sb=new StringBuilder();

		int ch=0;

		while((ch=r.read())!=-1){
			if(ch=='\r')
				continue;
			if(ch=='\n')
				return sb.toString();
			else
				sb.append((char)ch);
		}
		if(sb.length()!=0)
			return sb.toString();
		return null;
	}

	/*
	覆盖Reader类中的抽象方法。
	*/

	public int read(char[] cbuf,int off,int len)throws IOException{
		return r.read(cbuf,off,len);
	}
	public void close()throws IOException{
		r.close();
	}

	public void myClose()throws IOException{
		r.close();
	}

}

class MyBufferedReaderDemo{
	public static void main(String[] args)throws IOException{
		FileReader fr=new FileReader("buf.txt");

		MyBufferedReader mybr=new MyBufferedReader(fr);

		String line=null;
		while((line=mybr.myReadLine())!=null){
			System.out.println(line);
		}

		mybr.myClose();
	}
}










9.LineNumberReader 


import java.io.*;

class LineNumberReaderDemo{
	public static void main(String[] args) throws IOException{
		FileReader fr=new FileReader("buf.txt");

		LineNumberReader lnr=new LineNumberReader(fr);

		String line=null;

		//lnr.setLineNumber(100);
		while((line=lnr.readLine())!=null){
			System.out.println(lnr.getLineNumber()+":"+line);
		}

		lnr.close();
	}
}










10.MyLineNumberReader 

练习：模拟一个带行号的缓冲区对象。


import java.io.*;

class MyLineNumberReader{
	private Reader r;
	private int lineNumber;
	public MyLineNumberReader(Reader r){
		this.r=r;
	}

	public void setLineNumber(int lineNumber){
		this.lineNumber=lineNumber;
	}

	public int getLineNumber(){
		return lineNumber;
	}

	public String getMyReadLine()throws IOException{
		lineNumber++;
		StringBuilder sb=new StringBuilder();

		int ch=0;
		while((ch=r.read())!=-1){
			if(ch=='\r')
				continue;
			if(ch=='\n')
				return sb.toString();
			else
				sb.append((char)ch); 
		}
		if(sb.length()!=0)
			return sb.toString();
		return null;
	}

	public void myClose()throws IOException{
		r.close();
	}
}



class MyLineNumberReaderDemo{
	public static void main(String[] args)throws IOException{
		FileReader fr=new FileReader("g:\\pythonlearn\\demo.py");
		MyLineNumberReader mlnr=new MyLineNumberReader(fr);

		String line=null;

		while((line=mlnr.getMyReadLine())!=null){
			System.out.println(mlnr.getLineNumber()+":"+line);
		}

		mlnr.myClose();
	}
}




因为之前有一份代码也使用到了自定义缓冲区的功能，而上面这一份代码也同样用到此功能
因此可以对同一个功能进行向上抽取，所以可以对上面的代码简化如下：



class MyLineNumberReader extends MyBufferedReader{

	private int lineNumber;

	public MyLineNumberReader(Reader r){
		super(r);
	}

	public void setLineNumber(int lineNumber){
		this.lineNumber=lineNumber;
	}

	public int getLineNumber(){
		return lineNumber;
	}

	public String getMyReadLine()throws IOException{
		lineNumber++;
		return super.myReadLine();
	}


}


class MyLineNumberReaderDemo{
	public static void main(String[] args)throws IOException{
		FileReader fr=new FileReader("g:\\pythonlearn\\demo.py");
		MyLineNumberReader mlnr=new MyLineNumberReader(fr);

		String line=null;

		//mlnr.setLineNumber(100);
		
		while((line=mlnr.getMyReadLine())!=null){
			System.out.println(mlnr.getLineNumber()+":"+line);
		}

		mlnr.myClose();
	}
}







11.字节流File读写操作

字符流：
FileReader
FileWriter

BufferedReader
BufferedWriter


字节流:

InputStream   OutputStream

需求：想要操作图片数据，这时就要用到字节流。



import java.io.*;

class FileStream{
	public static void main(String[] args)throws IOException{
		copy_3();
	}


	public static void writeFile()throws IOException{
		FileOutputStream fos=new FileOutputStream("fos.txt");

		fos.write("abcde".getBytes());

		fos.close();
	}


	public static void copy_1()throws IOException{
		FileInputStream  fis=new FileInputStream("fos.txt");

		int ch=0;
		while((ch=fis.read())!=-1){
			System.out.println((char)ch);
		}

		fis.close();
	}


	public static void copy_2()throws IOException{
		FileInputStream  fis=new FileInputStream("fos.txt");

		byte[] buf=new byte[1024];
		int len=0;
		while((len=fis.read(buf))!=-1){
			System.out.println(new String(buf,0,len));
		}

		fis.close();
	}

	public static void copy_3()throws IOException{
		FileInputStream  fis=new FileInputStream("fos.txt");

		//int num=fis.available();
		
		//availiable这个方法一般情况下不用，因为如果要读取的文件非常大时，会出现内存溢出。（一般情况下jvm分配的内存是64M）
		
		byte[] buf=new byte[fis.available()];//定义一个刚刚好的缓冲区，不用在循环了。
		
		fis.read(buf);

		System.out.println(new String(buf));

		fis.close();

	}
}










12.拷贝图片

复制一个图片：

思路：
1.用字节读取流对象和图片关联。
2.用字节写入流对象创建一个图片文件。用于存储获取到的图片数据。
3.通过循环读写，完成数据的存储。
4.关闭资源。



import java.io.*;

class CopyPic{
	public static void main(String[] args){
		FileOutputStream  fos=null;
		FileInputStream fis=null;
		try{
			fos=new FileOutputStream("g:\\2.bmp");
			fis=new FileInputStream("g:\\1.bmp");

			byte[] buf=new byte[1024];
			int len=0;
			while((len=fis.read(buf))!=-1){
				fos.write(buf,0,len);
			}
		}catch(IOException e){
			throw new RuntimeException("copy fail");
		}
		finally{
			try{
				if(fos!=null)
					fos.close();
			}catch(IOException e){
				throw new RuntimeException("write fail");
			}
			try{
				if(fis!=null)
					fis.close();
			}catch(IOException e){
				throw new RuntimeException("read fail");
			}
		}
	}
}



13.字节流的缓冲区

演示mp3的复制，通过缓冲区。
BufferedOutputStream
BufferedInputStream


import java.io.*;

class CopyMp3{
	public static void main(String[] args)throws IOException{
		long start=System.currentTimeMillis();
		copy_1();
		long end=System.currentTimeMillis();

		System.out.println("time="+(end-start));
		
	}

	
	//通过字节流的缓冲区完成复制。
	public static void copy_1()throws IOException{
		BufferedInputStream bfis=new BufferedInputStream(new FileInputStream("g:\\1.mp3"));
		BufferedOutputStream bfos=new BufferedOutputStream(new FileOutputStream("g:\\2.mp3"));

		int by=0;

		while((by=bfis.read())!=-1){
			bfos.write(by);
		}

		bfis.close();
		bfos.close();

	}
}







14.自定义字节流的缓冲区-read和write的特点


11111111  -->提升了一个int类型，那不还是-1吗？是-1的原因是因为在8个1前面补的是1导致的。
那么我只要在前面补0，即可以保留原字节数据不变，又可以避免-1的出现。



import java.io.*;

class MyBufferedInputStream{
	private InputStream in;
	private int pos=0,count=0;
	private byte[] buf=new byte[1024*4];

	MyBufferedInputStream(InputStream in){
		this.in=in;
	}

	
	//一次读一个字节，从缓冲区（字节数组）获取。
	public int myRead()throws IOException{
	
		//通过in对象读取硬盘上数据，并存储buf中。
		if(count==0){
			count=in.read(buf);
			if(count<0)
				return -1;
			pos=0;
		    byte b=buf[pos];
		    count--;
		    pos++;
		    return b&255;
		}else if(count>0){
			byte b=buf[pos];
		    count--;
		    pos++;
		    return b&0xff;
		}
		return -1;
	}

	public void myClose()throws IOException{
		in.close();
	}
}





import java.io.*;

class CopyMp3{
	public static void main(String[] args)throws IOException{
		long start=System.currentTimeMillis();
		copy_1();
		long end=System.currentTimeMillis();

		System.out.println("time="+(end-start));
		
	}

	public static void copy_1()throws IOException{
		//BufferedInputStream bfis=new BufferedInputStream(new FileInputStream("g:\\1.mp3"));
		MyBufferedInputStream mbis=new MyBufferedInputStream(new FileInputStream("g:\\1.mp3"));
		BufferedOutputStream bfos=new BufferedOutputStream(new FileOutputStream("g:\\2.mp3"));

		int by=0;

		while((by=mbis.myRead())!=-1){
			bfos.write(by);
		}

		//bfis.close();
		mbis.myClose();
		bfos.close();

	}
}












15.读取键盘录入


System.out：对应的是标准输出设备，控制台。
System.in：对应的标准输入设备，键盘。

需求：通过键盘录入数据。
当录入一行数据后，就将该行数据进行打印。
如果录入的数据是over，那么停止录入。

import java.io.*;

class ReadIn{
	public static void main(String[] args)throws IOException{
		/*
		InputStream in=System.in;

		int ch=0;
		while((ch=in.read())!=-1){
			System.out.println(ch);
		}
		*/
		


		/*
		InputStream in=System.in;

		int by=in.read();
		int by1=in.read();
		int by2=in.read();

		System.out.println(by);
		System.out.println(by1);
		System.out.println(by2);

		*/



		

		InputStream in=System.in;
		StringBuilder sb=new StringBuilder();
		while(true){
			int ch=in.read();
			if(ch=='\r')
				continue;
			if(ch=='\n'){
				String s=sb.toString();
				if("over".equals(s))
					break;
				System.out.println(s.toUpperCase());
				sb.delete(0,sb.length());
			}else{
				sb.append((char)ch);
			}
		}
	}
}








16.读取转换流

通过刚才的键盘录入一行数据并打印其大写，发现其实就是读一行数据的原理。
也就是readLine方法

能不能直接使用readLine方法来完成键盘录入的一行数据的读取呢？

readLine方法是字符流BufferedReader类中的方法。

而键盘录入的是read方法是字节流InputStream的方法。

那么能不能将字节流转成字符流在使用字符流缓冲区的readLine方法呢？


import java.io.*;

class TransStreamDemo{
	public static void main(String[] args)throws IOException{

		//获取键盘录入对象。
		InputStream in=System.in;
		
		//将字节流对象转成字符流对象，使用转换流。InputStreamReader
		InputStreamReader isr=new InputStreamReader(in);

		//为了提高效率，将字符串进行缓冲区技术高效操作。使用BufferedReader
		BufferedReader   bfr=new BufferedReader(isr);

		String line=null;
		while((line=bfr.readLine())!=null){
			if("over".equals(line))
				break;
			System.out.println(line.toUpperCase());
		}

		bfr.close();
	}
}





17.写入转换流

import java.io.*;

class TransStreamDemo{
	public static void main(String[] args)throws IOException{
		/*
		InputStream in=System.in;

		InputStreamReader isr=new InputStreamReader(in);

		BufferedReader   bufr=new BufferedReader(isr);
       */

	   
	   //键盘的最常见写法。
		BufferedReader  bufr=new BufferedReader(new InputStreamReader(System.in));


		/*
		OutputStream  os=System.out;
		OutputStreamWriter  osw=new OutputStreamWriter(os);
		BufferedWriter   bufw=new BufferedWriter(osw);
		*/

		BufferedWriter  bufw=new BufferedWriter(new OutputStreamWriter(System.out));

	/*
		String line=null;
		while((line=bufr.readLine())!=null){
			if("over".equals(line))
				break;
			System.out.println(line.toUpperCase());
		}
	*/


		String line=null;
		while((line=bufr.readLine())!=null){
			if("over".equals(line))
				break;
			bufw.write(line.toUpperCase());
			bufw.newLine();
			bufw.flush();   //注意：用Writer里的方法时记得flush，否则目标地点没数据
		}
		bufr.close();
		bufw.close();
	}
}








18.流操作规律

1.
源：键盘录入。
目的：控制台。

2.需求：想把键盘录入的数据存储到一个文件中。
源：键盘。
目的：文件。


3.需求：想要将一个文件的数据打印在控制台上。
源：文件。
目的：控制台。

流操作的基本规律：
最痛苦的就是流对象有很多，不知道该用哪一个。

通过两个明确来完成 。

1.明确源和目的。
	源：输入流。InputStream  Reader
	目的：输出流。 OutputStream  Writer
	
2.操作的数据是否是纯文本。
	是：字符流。
	不是：字节流。
	
3.当体系明确后，在明确要使用哪个具体的对象。
	通过设备来进行区分：
	源设备：内存、硬盘、键盘
	目的设备：内存、硬盘、控制台
	
	
1.将一个文本文件中数据存储到另一个文件中。复制文件。
	源：因为是源，所以使用读取流。InputStream  Reader
	是不是操作文本文件。
	是！这时就可以选择Reader
	这样体系就明确了。
	
	接下来明确要使用该体系中的哪个对象。
	明确设备：硬盘。上一个文件。
	Reader体系中可以操作文件的对象是FileReader
	
	是否需要提高效率： 是！ 加入Reader体系中缓冲区BufferedReader.
	
	
	FileReader  fr=new FileReader("a.txt");
	BufferedReader  bufr=new BufferedReader(fr);
	
	
	
	
	目的：OutputStream   Writer
	是否是纯文本。
	是! Writer
	设备：硬盘，一个文件。
	Writer体系中可以操作文件的对象FileWriter。
	是否需要提高效率：是！ 加入Writer体系中缓冲区BufferedWriter
	
	
	FileWriter  fw=new FileWriter("b.txt");
	BufferedWriter  bufw=new BufferedWriter(fw);
	
	
练习：将一个图片文件 中数据存储到另一个文件中。复制文件 ，要按照以上格式自己完成三个明确。




import java.io.*;



//以下代码是根据上面改而来，这里把源改成读一个文件到cmd输出
class TransStreamDemo2{
	public static void main(String[] args)throws IOException{
		BufferedReader bufr=
				new BufferedReader(new InputStreamReader
							(new FileInputStream("CopyMp3.java")));

		BufferedWriter  bufw=new BufferedWriter
						(new OutputStreamWriter(System.out));


		String line=null;

		while((line=bufr.readLine())!=null){
			if("over".equals(line)){
				break;
			}else{
				bufw.write(line.toUpperCase());
				bufw.newLine();
				bufw.flush();
			}
		}

		bufr.close();
		bufw.close();

	}
}











19.流操作规律2

需求：将键盘录入的数据保存到一个文件中。
	这个需求中有源和目的都存在。
	那么分别分析
	源：InputStream  Reader
	是不是纯文本？ 是！ Reader
	
	设备：键盘。对应的对象是System.in
	不是选择Reader吗？System.in对应的不是字节流吗？
	为了操作键盘的文本数据方便。转成字符流按照字符串操作是最方便的。
	所以既然明确了Reader，那么就将System.inl转换成Reader。
	用了Reader体系中转换流，InputStreamReader
	
	InputStreamReader  isr=new InputStreamReader(System.in);
	
	需要提高效率吗？需要！ BufferedReader
	BufferedReader  bufr=new BufferedReader(isr);
	
	
	目的：OutputStream   Writer
	是否是存文本？ 是！Writer
	设备：硬盘。一个文件。使用FileWriter。
	FileWriter fw=new FileWriter("c.txt");
	需要提高效率吗？需要。
	BufferedWriter  bufw=BufferedWriter(fw);
	
	
	****************
	扩展一下，想要把录入的数据按照指定的编码表(utf-8),将数据存到文件中。
	
	目的：OutputStream  Writer
	是否是存文本？ 是！ Writer。
	设备：硬盘。一个文件。使用FileWriter。
	但是FileWriter是使用的默认编码表。GBK。
	
	但是存储时，需要加入指定编码表utf-8。而指定的编码表只有转换流要以指定。
	所以要使用的对象是OutputStreamWriter。
	而该转换流对象要接收一个字节输出流，而且还可以操作的文件的字节输出流。FileOutputStream
	
	OutputStreamWriter osw=new OutputStreamWriter(new FileOutputStream("d.txt"),"UTF-8");
	
	需要高效吗？  需要！
	BufferedWriter  bufw=new BufferedWriter(osw);
	
	所以，记住。转换流什么使用，字符和字节之间的桥梁，通过，涉及到字符编码转换时，
	需要用到转换流。
	

练习：将一个文本数据打印到控制台上。要按照以上格式自己完成三个明确。






20.改变标准输入输出设备

import java.io.*;


class TransStreamDemo3{
	public static void main(String[] args)throws IOException{
	//	System.setIn(new FileInputStream("HashSetTest.java"));

		System.setOut(new PrintStream("zzz.txt"));


		BufferedReader bufr=
				new BufferedReader(new InputStreamReader
							(System.in));

		BufferedWriter  bufw=new BufferedWriter
						(new OutputStreamWriter(System.out));


		String line=null;

		while((line=bufr.readLine())!=null){
			if("over".equals(line)){
				break;
			}else{
				bufw.write(line.toUpperCase());
				bufw.newLine();
				bufw.flush();
			}
		}

		bufr.close();
		bufw.close();

	}
}









21.异常的日志信息

import java.io.*;
import java.util.*;
import java.text.*;

class ExceptionInfo{
	public static void main(String[] args)throws IOException{
		
		/*
		try{

			int[] arr=new int[2];

			System.out.println(arr[3]);

		}catch(Exception e){
			e.printStackTrace(new PrintStream("a.txt"));
		}
		*/	


		try{

			int[] arr=new int[2];

			System.out.println(arr[3]);

		}catch(Exception e){

			try{

				Date d=new Date();
				SimpleDateFormat  sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String s=sdf.format(d);

				PrintStream  ps=new PrintStream("exception.log");
				ps.println(s);
				System.setOut(ps);

			}catch(IOException ex){
				throw new RuntimeException("log file not create success");
			}
			e.printStackTrace(System.out);
		}
			
		}
}

//以后可以使用一个log4j的工具类来输出日志







22.系统信息

import java.io.*;
import java.util.*;

class SystemInfo{
	public static void main(String[] args)throws IOException{
		Properties  prop=System.getProperties();

		//System.out.println(prop);		
		//prop.list(System.out);	
		prop.list(new PrintStream("sysinfo.txt"));	
	}
}
