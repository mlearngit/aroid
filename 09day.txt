1.内部类


/**
内部类的访问规则：
1.内部类可能直接访问外部类中的成员，包括私有。
  之所以可以直接访问外部类中的成员，是因为内部类中持有一个外部类的引用，格式：外部类名.this
2.外部类要访问内部类，必须建立内部类对象

3.当内部类在外部类的成员位置时可以被private修饰


3.创建内部类的好处：如果一个类要访问另一个类中的成员需要创建其对象，但是如果这个类在其内的内部(内部类)，就可以直接访问

*/

class Outer{
  private int x=3;
  
  private class Inner{
      // 	int x=4;
      public void function(){
		//  int x=6;
	    System.out.println("Inner: "+x);  //这句话中，打印结果是3,其实的调用方式为Outer.this.x
	  }
  }
  
  public void method(){
    Inner in=new Inner();
     in.function();
  }
}

public class InnerDemo{
   public static void main(String[] args){
       Outer out=new Outer();
	   out.method();
	 
	 //直接访问内部内中的成员，下面的写法基本用不着
	// Outer.Inner in=new Outer().new Inner();
	  //in.function();
   }
}




2.内部类定义原则：
当内部类在成员位置上，就可以被成员修饰符所修饰。
  比如：private ：将内部类在外部类中进行封装。
        static ：内部类就具备static特性。
		当内部被static修饰后，只能直接访问外部类听static成员，出现了访问局限。
		
		在外部其它类中，如何直接访问static内部类的非静态成员呢？
		new outer.Inner().function();
		
		在外部其它类中，如何直接访问static内部类的静态成员呢？
		uter.Inner.function();
		
	注意：当内部类中定义了静态成员，该内部类必须是static的。
	      当外部类别的静态方法访问内部类时，内部类也必须是static的。
