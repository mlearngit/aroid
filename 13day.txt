1.String 概述

class StringDemo{
	public static void main(String[] args){
		String s1="abc" //s1是一个类类型变量，"abc"是一个对象
	                    //字符串最大特点：一旦被初始化就不可以被改变。
		
		String s2=new String("abc");
		//s1和s2有什么区别？
		//s1在内存中有一个对象。
		//s2在内存中有两个对象。（因为有一个new和"abc"）
		
		System.out.println(s1==s2);
		System.out.println(s1.equals(s2));//String类复写了Object类中的equals方法
		                                  //该方法用于判断字符串是否相同
										  //equals是判断内容是否相同
	}
}




2.String常见功能-获取和判断

string类适用于描述字符串事物。
那么它就提供了多个方法对字符串进行操作。

常见的操作有哪些？
"abcd"

1.获取。
	1.1字符串中的包含的字符数，也就是字符串的长度。
		int length(); 获取长度。
	1.2根据位置获取位置上某个字符。
		char charAt(int index):
	1.3.根据字符获取该字符在字符串中的位置。
		int indexOf(int ch):返回的是ch在字符串中第一次出现的位置。
		int indexOf(int ch,int fromIndex):从fromIndex指定位置开始，获取ch在字符串中出现的位置
		
		int indexOf(String str):返回的是str在字符串中第一次出现的位置
		int indexOf(String str,int fromIndex)：从fromIndex指定位置开始，获取str在字符串中出现的位置。

2.判断
	2.1字符串中是否包含某一个子串。
		boolean contains(str):
		特殊之处：indexOf(str):可以索引str第一次出现位置，如果返回-1，表示该str不在字符串中存在。
				所以，也可以用于对指定判断是否包含。
				if(str.indexOf("aa"!=-1))
				而且该方法既可以判断，又可以获取出现的位置。
	
	2.2 字符中是否有内容。
		boolean isEmpty():原理就是判断长度是否为0。
	2.3字符串是否是以指定内容开头。
		boolean startsWith(str);
	2.4字符串是否是以指定内容结尾。
		boolean endsWith(str);
	2.5判断字符串内容是否相同，复写了Object类中的equals方法。
		boolean equals(str);
	2.6判断内容是否相同，并忽略大小写。
		boolean equalsIgnoreCase();


class StringMethodDemo{

	public static void method_5(){
		String s="  Hello Java   ";
		sop(s.toLowerCase());
		sop(s.toUpperCase());
		sop(s.trim());
		
		String s1="a1c";
		String s2="aaa";
		
		sop(s1.compareTo(s2));
	}
	
	publci static void method_sub(){
		String s="abcdef";
		
		sop(s.substring(2)); //从指定位置开始到结尾。
		sop(s.substring(20)); //如果角标不存在，会出现字符串角标越界异常。
		sop(s.substring(2,4));  //包含头，不包含尾。 s.substring(0,s.length());
	}
	
	public static void method_split(){
		String s="zhangsan,lisi,wangwu";
		String[] arr=s.split(",");
		
		for(int x=0;x<arr.length;x++){
			sop(arr[x]);
		}
	}
	
	
	public static void method_replace(){
		String s="hello java";
		
	  //String s1=s.replace('a','n');
	  // String s1=s.replace('q','n'); 如果要替换的字符不存在，返回的还是原串。
		String s1=s.replace("java","world");
		
		sop("s="+s);
		sop("s1="+s1);
	}

	public static void method_trans(){
		char[] arr={'a','b','c','d','e','f'};
		String s=new String(arr,1,3);
		sop("s="+s);
		
		String s1="zxcvbnm";
		char[] chs=s1.toCharArray();
		for(int x=0;x<chs.length;x++){
			sop("ch="+chs[x]);
		}
	}

	public static void method_is(){
		//判断文件名称是否是Array单词开头。
		sop(str.startsWith("Array"));
	    //判断文件名称是否是.java的文件。
		sop(str.endsWith(".java"));
		//判断文件中否是否包含Demo
		sop(str.contains("Demo"));
	}
	
	public static void method_get(){
		String str="abcdeakpf"
		
		//长度
		sop(str.length());
		
		//根据索引获取字符。
		sop(str.charAt(4));//当访问到字符串中不存在的角标时会发生StringIndexOutOfBoundsException。
		
		//根据字符获取索引
		sop(str.indexOf('m',3)); //如果没有找到，返回-1。
		
		//反向索引一个字符出现位置。
		sop(str.lastIndexOf("a");
	}
	public static void main(String[] args){
		method_get();
	}
	
	public static void sop(Object obj){
		System.out.println(obj);
	}
}


3.String(常见功能-转换)

	3.1将字符数组转成字符串。
		构造函数：String(char[])
				  String(char[],offset,count):将字符数组中的一部分转成字符串。
	
		静态方法：
				static String copyValueOf(char[]);
				static String copyValueOf(char[] data,int offset ,int count);
				
				static String valueOf(char[]);
	
	3.2 将字符串转成字符数组。 **
		char[] toCharArray();
	
	3.3 将字节数组转成字符串。
		String(byte[])
		String(byte[],offset,count):将字节数组中一部分转成字符串。
	
	3.4 将字符串转成字节数组。
		byte[] getBytes();
	
	3.5 将基本数据类型转成字符串。
		static String valueOf(int);
		static String valueOf(double);
		
		//3+""; //String.valueOf(3); 前面跟后面效果一样，但用后面表达更专业。
		
		特殊：字符串和字节数组在转换过程中，是可以指定编码表的。
		
		
		

4.String(常见功能-切割和替换)

  替换
	String replace(oldchar,newchar);
	
  切割
	String[] split(regex);
	
  子串。获取字符串中的一部分。
	String substring(begin);
	String substring(begin,end);
	
	
5.String(常见功能-比较和去除空格)

	转换、去除空格，比较。
	5.1 将字符串转成大写或小写。
		String toUpperCase();
		String toLowerCase();
		
	5.2 将字符串两端的多个空格去除。
		String trim();
		
	5.3 对两个字符串进行自然顺序的比较。
		int compareTo(string);
		
		

		
10.StringBuffer(常见功能-添加)

StringBuffer是字符串缓冲区。。
是一个容器。
特点：
1.长度是可变化的。
2.可以直接操作多个数据类型。
3.最终会通过toString()方法变成字符串。

CURD
C create U update R read D delete

1.存储
	StringBuffer append();将指定数据作为参数添加到已有数据结尾处。
	StringBuffer insert(index,数据)；可以将数据插入到指定index位置
	
2.删除

3.获取

4.修改


class StringBufferDemo{
	public static void main(String[] args){
		StringBuffer sb=new StringBuffer();
		
		sb.append("abc").append("true").append(34);
		//StringBuffer sb1=sb.append(34);
		//sop("sb==sb1"+(sb==sb1));
		
		sb.insert(1,"qq");
		sop(sb.toString());//abctrue34
		//sop(sb1.toString());
	}
	
	public static void sop(String str){
		System.out.println(str);
	}
}




11.StringBuffer(常见功能-删除和修改)


删除
	StringBuffer delete(start,end);删除缓冲区中的数据，包含start,不包含end
	StringBuffer deleteCharAt(index);删除指定位置的字符。
	
获取
	char charAt(int index)
	int indexOf(String str)
	int lastIndexOf(String str)
	int length()
	String substring(int start,int end)
	
修改
	StringBuffer replace(start,end,string);
	void setCharAt(int index,char ch);
	
反转
	StringBuffer reverse();
	
	将缓冲区中指定数据存储到指定字符数组中
	void getChars(int srcBegin,int srcEnd,char[] dst,int dstBegin);
	

class StringBufferDemo{

	public static void main(String[] args){
		StringBuffer sb=new StringBuffer("abcdef");
		
		char[] chs=new char[6];
		
		sb.getChars(1,4,chs,1);
		
		for(int x=0;x<chs.length;x++){
			sop("chs["+x+"]="+chs[x]+";");
		}
	}
	
	public static void method_update(){
		StringBuffer sb=new StringBuffer("abcde");
		
		//sb.replace(1,4,"java");//角标1到4，不包括4   ajavae
		sb.setCharAt(2,"k");//替换指定角标的值
		
		sop(sb.toString());
	}
	
	public static void method_del(){
		StringBuffer sb=new StringBuffer("abcde");
		
		//sb.delete(1,3); //角标1到3，不包括3     ade
		//sb.delete(0,sb.length()); //记住这方法，清空缓冲区
		//sb.delete(2,3); //清除一个元素
		sb.deleteCharAt(2);//上面清除一个元素的方法可以用该方法来做
		sop(sb.toString());
	}
	
	
	public static void sop(String str){
		System.out.println(str);
	}
}



12.StringBuilder

StringBuilder跟StringBuffer的方法完全一样
JDK1.5版本之后出现了StringBuilder

StringBuffer 是线程同步（线程安全）
StringBuilder 是线程不同步

注意：因为StringBuffer是线程同步的，所以它每次执行时
	都会去判断锁，这样会导致减缓运行的效率

以后开发，建议使用StringBuilder ！！！

java升级一般三个因素：
1.提高效率
2.简化代码
3.提高安全性





13.基本数据类型对象包装类。

byte		Byte
short		short
int 		Integer
long		Long
boolean 	Boolean
float		Float
double		Double
char		Character

基本数据类型对象包装类的最常见作用，
就是用于基本数据类型和字符串类型之间做转换

基本数据类型转成字符串。
	基本数据类型+""
	基本数据类型.toString(基本数据类型值);
	如：Integer.toString(34);//将34整数变成"34"


字符串转成基本数据类型。
xxx a=Xxx.parseXxx(String);

int a=Integer.parseInt("123");

double b=Double.parseDouble("12.23");

boolean b=Boolean.parseBoolean("true");

====注意：上面的4个方法都是静态的调用，而下面这种方式是通过对象调用=====

Integer i=new Integer("123");

int num=i.intValue();


十进制转成其它进制
	toBinaryString();
	toHexString();
	toOctalString();
	
其它进制转成十进制
	parseInt(string,radix);
	
	
class IntegerDemo{
	public static void main(String[] args){
		//整数类型的最大值。
		sop("int max :"+Integer.MAX_VALUE);
		
		//将一个字符串转成整数。
		int num=Integer.parseInt("123");//必须传入数字格式的字符串。
		//long x=Long.parseLong("123");
		
		//sop(Integer.toBinaryString(-6));
		//sop(Integer.toHexString(60));
		
		int x=Integer.parseInt("3c",16);
		sop("x="+x);
	}
	
	public static void sop(String str){
		System.out.println(str);
	}
}




14.基本数据类型对象包装类新特性

class IntegerDemo1{
	public static void main(String[] args){
		//Integer x=new Integer(4);
		Integer x=4; //自动装箱。//new Integer(4)
		
		x=x  /*x.intValue()*/   +2; //x+2:x进行自动拆箱，变成了int类型。和2进行加法运算。
						        //再将和进行装箱赋给x
								
								
        Integer m=128;
		Integer n=128;
		
		sop("m==n"+(m==n));
		
		Integer a=127;
		Integer b=127;
		
		sop("a==b:"+(a==b));//结果为true。因为a和b指向了同一个Integer对象。
						//因为当数值在byte范围内，对于新特性，如果该数值已经存在，则不会再开辟新的空间
	}
	
	public static void method(){
		Integer x=new Integer("123");
		Integer y=new Integer(123);
		
		sop("x==y:"+(x==y));
		if(x instanceof String){
			
		}
		sop(y);
		sop("x.equals(y):"+x.equals(y));
	}
	
	public static void sop(Object str){
		System.out.println(str);
	}
}