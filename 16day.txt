1.Map概述

Map集合：该集合存储键值对。一对一对往里存。而且要保证键的唯一性。
1.添加
	put(K key,V value)
	putAll(Map<? extends K,? extends V> m)
2.删除
	clear();
	remove(Object key)
3.判断
	containsValue(Object value);
	containsKey(Object key);
	isEmpty();
4.获取
	get(Object key)
	size();
	values();
	
	entrySet();
	keySet();
	
	
Map	
	|--Hashtable
	|--HashMap
	|--TreeMap
	

	
	
	
	
2.Map子类对象特点

Map	
	|--Hashtable：底层是哈希表数据结构，不可以存入null键null值。该集合是线程同步的，jdk1.0，效率低
	|--HashMap：底层是哈希表数据结构，允许使用null值null键。该集合是不同步的，jdk1.2，效率高
	|--TreeMap：底层是二叉树结构，线程不同步。可以用于给map集合中键进行排序。
	
和Set很像。
其实，Set底层就是使用了Map集合。


3.Map共性方法

import java.util.*;

class MapDemo{
	public static void main(String[] args){
		Map<String,String> map=new HashMap<String,String>();

		//添加元素，如果出现添加时，相同的键。那么后添加的值会覆盖原有键对应值。
		//并put方法会返回被覆盖的值。
		System.out.println("put:"+map.put("01","zhangsan1"));
		System.out.println("put:"+map.put("01","wangwu"));
		map.put("02","zhangsan2");
		map.put("03","zhangsan3");

		System.out.println("containsKey:"+map.containsKey("022"));
		//System.out.println("remove:"+map.remove("02");

		System.out.println("get:"+map.get("023"));

		map.put("04",null);
		System.out.println("get:"+map.get("04"));
		//可以通过get方法的返回值来判断一个键是否存在，通过返回null来判断

		//获取map集合中所有的值
		Collection<String> coll=map.values();
		System.out.println(coll);
		System.out.println(map);
	}
}



4.Map-KeySet

map集合的两种取出方式：
1.Set<k> keyset:将map中所有的键存入到Set集合。因为set具备迭代器。
	所以可以迭代方式取出所有的键，在根据get方法获取每一个键对应的值。
	
	Map集合的取出原理：将map集合转成set集合，在通过迭代器取出。

import java.util.*;

class MapDemo2{
	public static void main(String[] args){
		Map<String,String> map=new HashMap<String,String>();
		map.put("01","zhangsan01");
		map.put("03","zhangsan03");
		map.put("02","zhangsan02");
		map.put("04","zhangsan04");

		//先获取map集合的所有键的Set集合，keySet()。
		Set<String> keyset=map.keySet();

		//有了Set集合，就可以获取其迭代器。
		Iterator<String> it=keyset.iterator();

		while(it.hasNext()){
			String key=it.next();
			String value=map.get(key);
			System.out.println("key="+key+",value="+value);
		}

	}
}





5.Map-entrySet

取出方式2：
Set<Map.Entry<k,v>> entrySet：将map集合中的映射关系存入到了set集合中，而这个关系的数据类型就是：Map.Entry

import java.util.*;

class MapDemo3{
	public static void main(String[] args){
		Map<String,String> map=new HashMap<String,String>();
		map.put("01","zhangsan01");
		map.put("03","zhangsan03");
		map.put("02","zhangsan02");
		map.put("04","zhangsan04");

		//将Map集合中的映射关系取出，存入到Set集合中。
		Set<Map.Entry<String,String>> entryset=map.entrySet();

		Iterator<Map.Entry<String,String>> it=entryset.iterator();
		
		while(it.hasNext()){

			Map.Entry<String,String> me=it.next();

			String key=me.getKey();
			String value=me.getValue();

			System.out.println(key+":"+value);
		}

	}
}


//Map.Entry 其实Entry也是一个接口，它是Map接口中的一个内部接口
interface Map{
	public static interface Entry{
		public abstract Object getKey();
		public abstract Object getValue();
	}
}


class HashMap implements Map{
	class Hah implements Map.Entry{
		public Object getKey(){}
		public Object getValue(){}	
	}
}




6.练习

import java.util.*;

class Student implements Comparable<Student>{
	private String name;
	private int age;

	Student(String name,int age){
		this.name=name;
		this.age=age;
	}

	public int compareTo(Student s){
		int num=new Integer(this.age).compareTo(new Integer(s.age));
		if(num==0)
			return this.name.compareTo(s.name);
		return num;
	}
	
	public int hashCode(){
		//System.out.println(this.name+"....hashcode");
		return this.name.hashCode()+this.age*37;
	}

	public boolean equals(Object obj){
		if(!(obj instanceof Student))
			throw new ClassCastException("leixing pipei error!");

		Student s=(Student)obj;
		System.out.println(this.name+"....equals...."+s.name);
		return this.name.equals(s.name) && this.age==s.age;
	}

	public String getName(){
		return name;
	}

	public int getAge(){
		return age;
	}

	public String toString(){
		return name+":"+age;
	}
}


class MapTest{
	public static void main(String[] args){
		HashMap<Student,String>  hm=new HashMap<Student,String>();

		hm.put(new Student("zhangsan01",13),"nanjing");
		hm.put(new Student("zhangsan02",10),"beijing");
		hm.put(new Student("zhangsan03",16),"wuhan");
		System.out.println(hm.put(new Student("zhangsan04",144),"shanghai"));
		//System.out.println(hm.put(new Student("zhangsan04",14),"chengdu"));
		
		

		Set<Student>  keyset=hm.keySet();

		Iterator<Student>  it=keyset.iterator();
		while(it.hasNext()){
			Student stu=it.next();

			String addr=hm.get(stu);
			System.out.println(stu+":"+addr);
		}
	/*
		Set<Map.Entry<Student,String>>  entryset=hm.entrySet();
		Iterator<Map.Entry<Student,String>> iter=entryset.iterator();
		while(iter.hasNext()){

			Map.Entry<Student,String> me=iter.next();

			Student name=me.getKey();
			String addr=me.getValue();

			System.out.println(name+"...."+addr);
		}
	*/


		
        System.out.println(".............TreeSet..............");
		//以下代码是为了测试当实现Comparable接口后对年龄进行排序（跟上面代码无关）

		TreeSet<Student> hs=new TreeSet<Student>();
		hs.add(new Student("zhangsan01",13));
		hs.add(new Student("zhangsan02",10));
		hs.add(new Student("zhangsan03",16));
		System.out.println(hs.add(new Student("zhangsan04",144)));  //true
		System.out.println(hs.add(new Student("zhangsan04",144)));  //false 



		Iterator<Student> its=hs.iterator();
		while(its.hasNext()){
			Student s=its.next();
			System.out.println(s);
		}
	}
}


结果:
E:\javatest>java MapTest
null
zhangsan03:16:wuhan
zhangsan02:10:beijing
zhangsan04:144:shanghai
zhangsan01:13:nanjing
.............TreeSet..............
true
false
zhangsan02:10
zhangsan01:13
zhangsan03:16
zhangsan04:144





7.练习（获取字符串中每个字符的个数）

import java.util.*;
class  MapTest2{
	public static void main(String[] args){
		String s="caffabekacafb";
		String str=strCount(s);
		System.out.println(str);
	}

	public static String strCount(String str){
		char[] ch=str.toCharArray();
		HashMap<Character,Integer> hm=new HashMap<Character,Integer>();
		for(int i=0;i<ch.length;i++){
			Integer value=hm.get(ch[i]);
	
			if(value==null){
				hm.put(ch[i],1);
			}else{
				value=value+1;
				hm.put(ch[i],value);
			}
			value=0;
		}
		StringBuffer sb=new StringBuffer();
			for(Iterator<Character> it=hm.keySet().iterator();it.hasNext();){
				Character k=it.next();
				Integer v=hm.get(k);
				sb.append(k+"("+v+")");
			}
		return sb.toString();
	}
}

//result: f(3)e(1)b(2)c(2)a(4)k(1)



8.扩展：

可以理解为一个学校有一个班(班名)，一个班有学生（而学生自身的关系是：学号-姓名）


import java.util.*;

class MapTest3{
	public static void main(String[] args){
		Map<String,Map<String,String>> csdn=new HashMap<String,Map<String,String>>();
		Map<String,String> yure=new HashMap<String,String>();
		yure.put("01","zhangsan");
		yure.put("02","lisi");
		Map<String,String> jiuye=new HashMap<String,String>();
		jiuye.put("03","wangwu");
		jiuye.put("04","zhaoliu");

		csdn.put("yure",yure);
		csdn.put("jiuye",jiuye);

		Set<String>  keyset=csdn.keySet();
		Iterator<String> it=keyset.iterator();
		while(it.hasNext()){
			String k=it.next();
			Map<String,String> v=csdn.get(k);
			System.out.println(k);
			coll(v);
		}
	}

	public static void coll(Map<String,String> v){
		for(Iterator<Map.Entry<String,String>> it=v.entrySet().iterator();it.hasNext();){
			Map.Entry<String,String> me=it.next();
			System.out.println(me.getKey()+":"+me.getValue());
		}		
	}
}
/*
result:

jiuye
04:zhaol
03:wangw
yure
01:zhang
02:lisi
*/
