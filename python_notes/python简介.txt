http://python.usyiyi.cn/translate/python_278/tutorial/introduction.html

Python简介

一.数字：
1.除法(/)返回的类型取决于它的操作数。如果两个操作数都是int，将采用floor除法(floor division)并返回一个int。
如果两个操作数中有一个是float，将采用传统的除法并返回一个float。还提供//运算符用于取整除(返回商的整数部分)而无论被操作数是什么类型。
余数可以用%操作符计算：

2.通过Python，还可以使用**运算符计算幂乘方[1]

3.等号（=）用于给变量赋值。赋值之后，在下一个提示符之前不会有任何结果显示

4.如果变量没有“定义”（赋值），使用的时候将会报错

5.Python中完全支持浮点数；整数和浮点数的混合计算中，整数会被转换为浮点数

6.在交互模式下，最近一次表达式的值被赋给变量_。这意味着把Python当做桌面计算器使用的时候，可以方便的进行连续计算。
用户应该将这个变量视为只读的。不要试图去给它赋值 — 你将会创建出一个独立的同名局部变量，并且屏蔽了内置变量的魔术效果。
除了int和float，Python还支持其它数字类型，例如Decimal和Fraction。Python还内建支持复数，使用后缀j或J表示虚数部分（例如3+5j）







二、字符串

7.issues:如果字符串中只有单引号而没有双引号，就用双引号引用，否则用单引号引用

8.如果你前面带有\的字符被当作特殊字符，你可以使用原始字符串，方法是在第一个引号前面加上一个r:


9.字符串可以用+操作符连接，也可以用*操作符重复多次：

>>> # 3 times 'un', followed by 'ium'
>>> 3 * 'un' + 'ium'
'unununium'



10.相邻的两个或多个字符串字面量（用引号引起来的）会自动连接。

>>> 'Py' 'thon'
'Python'



11.然而这种方式只对两个常量有效，变量或者表达式是不行的。

>>> prefix = 'Py'
>>> prefix 'thon'  # can't concatenate a variable and a string literal
  ...
SyntaxError: invalid syntax
>>> ('un' * 3) 'ium'
  ...
SyntaxError: invalid syntax



12.如果你想连接多个变量或者连接一个变量和一个常量，使用“+”：

>>> prefix + 'thon'
'Python'


*13.这个功能在你想切分很长的字符串的时候特别有用：

>>> text = ('Put several strings within parentheses '
            'to have them joined together.')
>>> text
'Put several strings within parentheses to have them joined together.'


*注意，因为-0和0是一样的，负的索引从-1开始。
除了索引，还支持切片。索引用于获得单个字符，切片让你获得一个子字符串。
注意，包含起始的字符，不包含末尾的字符。这使得s[:i] + s[i:]永远等于s：
切片的索引有非常有用的默认值；省略的第一个索引默认为零，省略的第二个索引默认为切片的字符串的大小。



有个方法可以记住切片的工作方式，把索引当做字符之间的点，第一个字符的左边是0。含有n个字符的字符串的最后一个字符的右边是索引n，例如：

 +---+---+---+---+---+---+
 | P | y | t | h | o | n |
 +---+---+---+---+---+---+
 0   1   2   3   4   5   6
-6  -5  -4  -3  -2  -1
第一行给出了字符串中0..6各索引的位置；第二行给出了相应的负索引。从ｉ到ｊ的切片由ｉ和ｊ之间的所有字符组成。
对于非负索引，如果上下都在边界内，切片长度就是两个索引之差。例如，word[1:3] 的长度是 2。





试图使用太大的[索引]会导致错误：

>>> word[42]  # the word only has 7 characters
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: string index out of range



但是，当用于切片时，超出范围的切片索引会被优雅地处理：

>>> word[4:42]
'on'
>>> word[42:]
''



Python字符串不可以被更改 — 它们是不可变的。因此，赋值给字符串索引的位置会导致错误：

>>> word[0] = 'J'
  ...
TypeError: 'str' object does not support item assignment
>>> word[2:] = 'py'
  ...
TypeError: 'str' object does not support item assignment





如果你需要一个不同的字符串，你应该创建一个新的：

>>> 'J' + word[1:]
'Jython'
>>> word[:2] + 'py'
'Pypy'


内置函数len()返回字符串的长度