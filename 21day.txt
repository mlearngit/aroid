1.IO流（对象的序列化）

注意：
1.在堆内存中的对象能够被序列化
2.被static修饰的成员不会被序列化（因为静态都存在于方法区）
3.要想某个非静态的成员不被序列化，需要在其前加上关键字：transient
4.当某变量加上transient关键字后，当再反序列化时，被修饰的那个变量将获取不到（原因是该变量的生命周期仅限于调用时的内存中，而不会
在磁盘上持久化存在。它也没有被序列化到文件中保存）


一、序列化和反序列化的概念

　　把对象转换为字节序列的过程称为对象的序列化。
　　把字节序列恢复为对象的过程称为对象的反序列化。
　　对象的序列化主要有两种用途：
　　1） 把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中；
　　2） 在网络上传送对象的字节序列。

　　在很多应用中，需要对某些对象进行序列化，让它们离开内存空间，入住物理硬盘，以便长期保存。
	比如最常见的是Web服务器中的Session对象，当有 10万用户并发访问，就有可能出现10万个Session对象，
	内存可能吃不消，于是Web容器就会把一些seesion先序列化到硬盘中，等要用了，再把保存在硬盘中的对象还原到内存中。

　　当两个进程在进行远程通信时，彼此可以发送各种类型的数据。无论是何种类型的数据，都会以二进制序列的形式在网络上传送。
	发送方需要把这个Java对象转换为字节序列，才能在网络上传送；接收方则需要把字节序列再恢复为Java对象。

二、JDK类库中的序列化API

　　java.io.ObjectOutputStream代表对象输出流，它的writeObject(Object obj)方法可对参数指定的obj对象进行序列化，
	把得到的字节序列写到一个目标输出流中。
	
　　java.io.ObjectInputStream代表对象输入流，它的readObject()方法从一个源输入流中读取字节序列，再把它们反序列化为一个对象，
	并将其返回。
	
　　只有实现了Serializable和Externalizable接口的类的对象才能被序列化。Externalizable接口继承自 Serializable接口，
	实现Externalizable接口的类完全由自身来控制序列化的行为，而仅实现Serializable接口的类可以 采用默认的序列化方式 。
	
　　对象序列化包括如下步骤：
　　1） 创建一个对象输出流，它可以包装一个其他类型的目标输出流，如文件输出流；
　　2） 通过对象输出流的writeObject()方法写对象。

　　对象反序列化的步骤如下：
　　1） 创建一个对象输入流，它可以包装一个其他类型的源输入流，如文件输入流；
　　2） 通过对象输入流的readObject()方法读取对象。
	
	来源url:http://www.cnblogs.com/xdp-gacl/p/3777987.html
	

	
	其它注意：我们知道在Java中，对象的序列化可以通过实现两种接口来实现，若实现的是Serializable接口，则所有的序列化将会自动进行，
	若实现的是Externalizable接口，则没有任何东西可以自动序列化，需要在writeExternal方法中进行手工指定所要序列化的变量，
	这与是否被transient修饰无关。



import java.io.*;

class ObjectStreamDemo{
	public static void main(String[] rgs)throws Exception{
		writeObj();
	}


	public static void readObj()throws Exception{
		ObjectInputStream  ois=new  ObjectInputStream(new FileInputStream("obj.txt"));

		Person  p=(Person)ois.readObject();

		System.out.println(p);

		ois.close();
	}

	public static void writeObj()throws IOException{
		ObjectOutputStream  oos=new ObjectOutputStream(new FileOutputStream("obj.txt"));
		oos.writeObject(new Person("lisi",39));
		oos.close();
	}
}

========================

import java.io.*;

class Person implements Serializable{

	public static final long serialVersionUID = 42L;

	private String name;
	transient int age;
	Person(String name,int age){
		this.name=name;
		this.age=age;
	}

	public String toString(){
		return name+":"+age;
	}
}






2.IO流（管道流）
1.之前的流在读取和写入时都有一个中转站，比如读取流把数据读进数组，再由写入流来操作
2.而管道流可以直接一边读一边写。只要把两要管道对接上就行。
3.通常情况下，管道流分别放到不同线程中去执行（不建议两对象使用单线程）
4.read()方法当没有读取到数据时就处于等待状态。
5.集合中涉及到io的是Properties;而io中涉及到多线程的是管道流。


import java.io.*;

class Read implements Runnable{
	private PipedInputStream in;
	Read(PipedInputStream in){
		this.in=in;
	}

	public void run(){
		try{	
			byte[] buf=new byte[1024];

			System.out.println("读取前...没有数据阻塞");

			int len=in.read(buf);

			System.out.println("读到数据...阻塞结束");


			String s=new String(buf,0,len);
			System.out.println(s);
			in.close();
		}catch(IOException e){
			throw new RuntimeException("read fail !");
		}

	}
}



class Write implements Runnable{
	private PipedOutputStream out;
	Write(PipedOutputStream out){
		this.out=out;
	}

	public void run(){
		try{	

			Thread.sleep(6000);
			out.write("piped  lai la".getBytes());
			out.close();
		}catch(IOException e){
			throw new RuntimeException("write fail !");
		}

	}
}


class PipedStreamDemo{
	public static void main(String[] args)throws IOException{
		PipedInputStream   in=new PipedInputStream();
		PipedOutputStream  out=new PipedOutputStream();
		in.connect(out);
		Read  r=new Read(in);
		Write w=new Write(out);
		new Thread(r).start();
		new Thread(w).start();
	}
}







3.IO流（RandomAccessFile）

RandomAccessFile）
该类不算是io体系中子类。
面是直接继承至Object。

但是它是IO包中成员，因为它具备读和写功能。
内部封装了一个数组，而且通过指针对数组的元素进行操作。
可以通过getFilePointer获取指针位置，
同时可以通过seek改变指针的位置。


其实完成读写的原理 就是内部封装了字节输入流和输出流。

通过构造函数可以看出，该类只能操作文件。

而且操作文件还有模式：只读r  、 读写rw 等

如果模式为只读r 。 不会创建文件。会去读取一个已存在文件，如果该文件不存在，则会出现异常。
如果模式rw。操作的文件不存在，会自动创建。如果存在则不会覆盖。



import java.io.*;

class RandomAccessFileDemo{
	public static void main(String[] args)throws IOException{
		writeFile();
		//readFile();
	}


	public static void readFile()throws IOException{
		RandomAccessFile  raf=new RandomAccessFile("ran.txt","r");

		raf.seek(8*1);

		//raf.skipBytes(8);

		byte[]  buf=new byte[4];

		raf.read(buf);一次读4个字节

		String name= new String(buf);

		int age=raf.readInt();

		System.out.println("name="+name);
		System.out.println("age="+age);
	}


	public static void writeFile_2()throws IOException{
		RandomAccessFile  raf=new RandomAccessFile("ran.txt","rw");
		raf.seek(8*0);
		raf.write("周期".getBytes());
		raf.writeInt(103);

		raf.close();
	}


	public static void writeFile()throws IOException{
		RandomAccessFile  raf=new RandomAccessFile("ran.txt","rw");

		raf.write("李四".getBytes());
		raf.writeInt(97);
		raf.write("王五".getBytes());
		raf.writeInt(99);//可以一次写4个字节
		//raf.write(258);//一次写一个低8位（后8位

		raf.close();
	}
}








4.IO流（操作基本数据类型的流对象DataStream）


DataInputStream与DataOutputStream

可以用于操作基本数据类型的数据的流对象

注意：
writeUTF()方法是使用  "UTF-8修改版"编码  将一个字符串写入基础输出流
当读取时，也需要用readUTF()来读取
而不能读取其它编码的文件(比如某文件以utf-8写入的)。


记住：凡是操作基本数据类型就可以用DataStream

import  java.io.*;

class DataStreamDemo{
	public static void main(String[] args)throws IOException{
		//writeData();
		//readData();
		//writeUTFDemo();
		readUTFDemo();


		//OutputStreamWriter  osw=new OutputStreamWriter(new FileOutputStream("utf.txt"),"utf-8");
		//osw.write("nihao");
		//osw.close();
	}

	public static void readUTFDemo()throws IOException{
		DataInputStream  dis=new DataInputStream(new FileInputStream("utfdata.txt"));

		String s=dis.readUTF();

		System.out.println(s);

		dis.close();
	}

	
	public static void writeUTFDemo()throws IOException{
		DataOutputStream  dos =new DataOutputStream(new FileOutputStream("utfdata.txt"));

		dos.writeUTF("nihao");

		dos.close();
	}

	
	
	public static void readData()throws IOException{
		DataInputStream dis=new DataInputStream(new FileInputStream("data.txt"));

		//下面的获取方法必须要跟写入时方法的顺序一致，否则取不到正确的值（因为每个方法获取时读的字节数不同）
		int num=dis.readInt();
		boolean b=dis.readBoolean();
		double d=dis.readDouble();

		
		System.out.println("num="+num);
		System.out.println("b="+b);
		System.out.println("d="+d);

		dis.close();
	}

	public static void writeData()throws IOException{
		DataOutputStream dos=new DataOutputStream(new FileOutputStream("data.txt"));

		
		//当写入时，打开文件发现是乱码，是因为文件在读取时是按照GBK码表去查出来显示的。
		dos.writeInt(234);
		dos.writeBoolean(true);
		dos.writeDouble(9987.534);

		dos.close();
	}
}










5.IO流（ByteArrayStream）
用于操作字节数组的流对象。

ByteArrayInputStream:在构造的时候，需要接收数据源。而且数据源是一个字节数组。

ByteArrayOutputStream:在构造的时候，不用定义数据目的，国为该对象中已经内部封装了要变长度
的字节数组。这就是数据目的地。

因为这两个流对象都操作的数组，并没有使用系统资源。
所以，不用进行close关闭。

ByteArrayInputStream 操作的是字节数组（在构造的时候直接把数据存到数组里面去了），
没有操作系统资源，因此不涉及到系统资源调用问题，也就不用关流和抛异常。


源设备：
	键盘 System.in   硬盘 FileStream   内存  ArrayStream
目的设备：
	控制吧 System.out  硬盘  FileStream   内存  ArrayStream
	
	
知识点扩展：
如果操作的数组是一些文字，可以用字符数组CharArrayReader和CharArrayWriter 操作方法与字节同理

操作字符串：StringReader 和  StringWriter  ,操作方法与上同理

import java.io.*;

class ByteArrayStream{
	public static void main(String[] args){
		ByteArrayInputStream bis= new ByteArrayInputStream("ABCDEFG".getBytes());

		ByteArrayOutputStream bos=new ByteArrayOutputStream();

		int by=0;

		while((by=bis.read())!=-1){
			bos.write(by);
		}

		System.out.println(bos.size());
		System.out.println(bos.toString());

		//bos.writeTo(new FileOutputStream("a.txt"));//可以一次性将数组里的数据写入文件中
	}
}







6.IO流（转换流的字符编码）

import java.io.*;

class EncodeStream{
	public static void main(String[] args)throws IOException{
		writeText();
		//readText();
	}

	public static void readText()throws IOException{
		InputStreamReader  isr=new InputStreamReader(new FileInputStream("utf.txt"),"utf-8");

		char[] buf=new char[10];
		int len=isr.read(buf);
		String str=new String(buf,0,len);
		System.out.println(str);
		isr.close();
	}


	public static void writeText()throws IOException{
		OutputStreamWriter  osw= new OutputStreamWriter(new FileOutputStream("gbk.txt"));

		osw.write("你好");

		osw.close();
	}
}







7.字符编码

编码：字符串变成字节数组。

解码：字节数组变成字符串。

String  --->byte[];   str.getBytes(charsetName)

byte[]	--->String:   new  String(byte[],charsetName);



import java.io.*;
import java.util.*;

class EncodeDemo{
	public static void main(String[] args)throws Exception{
		
		String s="哈哈";
		byte[] b1=s.getBytes("GBK");

		System.out.println(Arrays.toString(b1));
		String s1=new String(b1,"ISO8859-1");
		System.out.println("s1="+s1);

		
		//对s1进行iso8859-1编码
		byte[]  b2=s1.getBytes("ISO8859-1");
		System.out.println(Arrays.toString(b2));

		String  s2=new String(b2,"gbk");

		System.out.println("s2="+s2);
	}
}






9.练习

需求：
有五个学生，每个学生有3门课的成绩，
从键盘输入以上数据（包括姓名、三门课成绩），
输入的格式：如：zhangsan，30，40，60计算出总成绩，
并把学生的信息和计算出的总分数高低顺序存放在磁盘文件"stud.txt"中。

1.描述学生对象。
2.定义一个可操作学生对象的工具类。


思想：
1.通过获取键盘录入一行数据，并将该行中的信息取出封装成学生对象。
2.因为学生有很多，那么就需要存储，使用到集合。因为要对学生总分排序。
	所以可以使用TreeSet。
3.将集合的信息写入到一个文件中。

import java.io.*;
import java.util.*;

class Student implements Comparable<Student>{
	String name;
	int ma,cn,en;
	int sum;

	Student(String name,int ma,int cn,int en){
		this.name=name;
		this.ma=ma;
		this.cn=cn;
		this.en=en;
		sum=ma+cn+en;
	}

	public int hashCode(){
		return name.hashCode()+sum*37;
	}

	public boolean equals(Object obj){
		if(!(obj instanceof Student)){
			throw new ClassCastException("tyte error!");
		}
		Student s=(Student)obj;
		return this.name.equals(s.name) && this.sum==s.sum;
	}

	public int compareTo(Student s){
		
		int num=new Integer(this.sum).compareTo(new Integer(s.sum));
		if(num==0){
			return this.name.compareTo(s.name);
		}
		return num;
	}

	public String getName(){
		return name;
	}

	public int getSum(){
		return sum;
	}

	public String toString(){
		return "student["+name+","+ma+","+cn+","+en+"]";
	}

}

class StudentInfoTool{
	public static Set<Student> getStudent()throws IOException{
		return getStudent(null);
	}
	
	public static Set<Student>  getStudent(Comparator<Student> comp)throws IOException{
		
		BufferedReader  bufr=new BufferedReader(new InputStreamReader(System.in));
		
		Set<Student> stus=null;
		if(comp==null){
			 stus=new TreeSet<Student>();
		}else{
			stus=new TreeSet<Student>(comp);
		}
		
		String line=null;
		while((line=bufr.readLine())!=null){
			if("over".equals(line)){
				break;
			}
			String[] info=line.split(",");
			Student stu=new Student(info[0],Integer.parseInt(info[1]),
				                            Integer.parseInt(info[2]),
				                            Integer.parseInt(info[3]));
			stus.add(stu);
		}
		bufr.close();
		return stus;
	} 


	public static void write2File(Set<Student> stus)throws IOException{
		BufferedWriter  bufw=new BufferedWriter(new FileWriter("stuinfo.txt"));
		for(Student stu : stus){
			bufw.write(stu.toString()+"\t");
			bufw.write(stu.getSum()+"");
			bufw.newLine();
			bufw.flush();
		}

		bufw.close();
	}
}

class StudentInfoTest{
	public static void main(String[] args)throws IOException{
		Comparator<Student> comp=Collections.reverseOrder();
		Set<Student> stus=StudentInfoTool.getStudent(comp);
		StudentInfoTool.write2File(stus);
	}
}

