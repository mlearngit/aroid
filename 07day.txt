01.继承-概述1

将学生和工人的共性描述提取出来，单独进行描述
只要让学生和工人与单独描述的这个类有关系，就可以了。
继承：
1.提高了代码的复用性。
2.让类与类之间产生关系，有了这个关系，才有了多态的特性

注意：千万不要为了获取其它类的功能，简化代码而继承；必须是类与类之间有所属关系才可以继承。所属关系is a.




02.继承-概述2
Java语言中：Java只支持单继承，不支持多继承

因为多继承容易带来安全隐患：当多个父类中定义相同功能，
当功能内容不同时，子类对象不确定要运行哪一个。
但是java保留这种机制，并用另一种体现形式来完成表示，多实现。

java支持多层继承，也就是一个继承体系
如何使用一个继承体系中的功能呢？

想要使用体系，先查阅体系父类的描述，因为父类中定义的是该体系中共性功能。
通过了解共性功能，就可以知道该体系的基本功能。
那么这个体系已经可以基本使用了。
那么在具体调用时，要创建子类的对象，为什么呢？
一是因为有可能父类不能创建对象
二是创建子类对象可以使用更多的功能，包括基本的也包括特有的。

简单一句话：查阅父类功能，创建子类对象使用功能。


03.聚集关系：
事物之间不一定非得有继承关系，还有其它关系

聚集：has a(谁里面有谁)。而谁是谁的一种是继承(is a)
聚合：一个班里面，人就是班里面的一员
组合：(事物间联系更紧密)，比如说手或心脏是人身体的一部分


04.子父类中变量的特点
子父类出现后，类成员的特点：
1.变量
2.函数
3.构造函数

1.变量
如果子类中出现非私有的同名成员变量时，
子类要访问本类中的变量，用this
子类要访问父类中的同名变量，用super.

super的使用和this的使用几乎一致。
this代表的是本类对象的引用
super代表的是父类对象的引用



05.子父类中函数的特点-覆盖

1.子父类中的函数。
当子类出现和父类一模一样的函数时，
当子类对象调用该函数，会运行子类函数的内容。
如同父类中的函数被覆盖一样。

这种情况是函数的另一种特性：重写（覆盖）

当子类继承父类，沿袭了父类的功能，到子类中，
但是子类虽具备该功能，但是功能的内容却和父类不一致，这时，没有必要定义新功能，而是使用覆盖特性，
保留父灰的功能定义，并重写功能内容

覆盖：
1.子类覆盖父类，必须保证子类权限大于等于父类权限，才可以覆盖，否则编译失败。
2.静态只能覆盖静态。

记住:
1.重载：只看同名函数的参数列表
2.重写：子父类方法要一模一样



06.子父类中构造函数的特点-子类实例化过程

1.子父类中的构造函数

在对子类对象进行初始化时，父类的构造函数也会运行，
那是因为子类的构造函数默认第一行有一条隐式的语句super();
super()：会访问父类中空参数的构造函数。而且子类中的所有构造函数默认第一行都是super();


为什么子类一定要访问父类中的构造函数。
因为父类中的数据子类可以直接获取。所以子类对象在建立时，需要先查看父类是如何对这些数据进行初始化的。
所以子类在对象初始化时，要先访问一下父类中的构造函数。
如果要访问父类中指定的构造函数，可以通过手动定义super()语句的方式来指定。

注意：super语句一定定义在子类构造函数的第一行。

子类的实例化过程(结论)：
子类的所有构造函数，默认都会访问父类中空参数的构造函数。
因为子类每一个构造函数内的第一行都有一句隐式super();

当父类中滑空参数的构造函数时，子类必须手动通过super语句形式来指定要访问父类中的构造函数。

当然：子类的构造函数u第一行也是可以手动指定this语句来访问本类中的构造函数。
子类中至少会有一个构造函数访问访问父类中的构造函数


07.final关键字
final:最终。作为一个修饰符。
1.可以修饰类，函数，变量。
2.被final修饰的类不可以被继承，为了避免被继承，被子类复写功能。
3.被final修饰的方法不可以被复写
4.被final修饰的变量是一个常量只能赋值一次，即可以修饰成员变量，又可以修饰局部变量。
  当在描述事物时，一些数据的出现值是固定的，那么这时为了增强阅读性，都给这些值起个名字，方便于阅读。
  而这个值不需要改变，所以加上final修饰。作为常量：常量的书写规范所有字母都大写，如果由多个单词组成，单词间通过“_”连接
5.内部类定义在类中的局部位置上时，只能访问该局部被final修饰的局部变量。


08.抽象类
当多个类中出现相同功能，但功能主体不同，
这是可以进行向上抽取，这时，只抽取功能定义，而不抽取功能主体。

抽象:看不懂

抽象类的特点：
1.抽象方法一定在抽象类中。
2.抽象方法和抽象类都必须被abstract关键字修饰
3.抽象类不可以用new创建对象，因为调用抽象方法没意义。
4.抽象类中的抽象方法要被使用，必须由子类复写起所有的抽象方法后，建立子类对象调用。
  如果子类只覆盖了部分抽象方法，那么该子类还是一个抽象类。


  
09.抽象类2
抽象类和一般类滑太大的不同。
该如何描述事物，就如何描述事物，只不过，该事物出现了一些看不懂的东西。
这些不确定的部分，也是该事物的功能，需要明确出现。但是无法定义主体、
通过抽象方法来表示。

抽象类比一般类多了个抽象函数。就是在类中可以定义抽象方法。
抽象类不可以实例化

特殊：抽象类中可以不定义抽象方法，这样做仅仅是不让该类建立对象。


10.抽象类练习

需求：获取一段程序运行的时间。
原理：获取程序开始和结束的时间并相减即可。

获取时间：System.currentTimeMillis();

当代码完成优化后，就可以解决这类问题。
这种方式，模版方法设计模式。

什么是模板方法呢？
在定义功能时，功能的一部分是确定的，但是有一部分是不确定的，而确定的部分在使用不确定部分，
那么这时就将不确定的部分暴露出去，由该类的子类云完成。

abstract class GetTime{
   public final void getTime(){
       long start=System.currentTimeMillis();
	   
	   runCode();
	   
	   long end=System.currentTimeMillis();
	   
	   System.out.print(" millis:"+(end-start));

    }
   
   public abstract void runCode();
}

class SubTime extends GetTime{
	
    public void runCode(){
	  for(int x=0;x<500;x++){
	      System.out.print(x); 
	  }
	}

}

public class TestDeom{
   public static void main(String[] args){
      new SubTime().getTime();
   }
}
12.接口

接口：初期理解，可以认为是一个特殊的抽象类
       当抽象类听方法都是抽象的，那么该类可以通过接口的形式来表示

class 用于定义类
interface 用于定义接口

接口定义时，格式特点：
1.接口中常见定义：常量、抽象方法。
2.接口中的成员都有固定修饰符。
  常量：public static final
  方法：public abstract
  
注意：interface其中也是一个类，在编译的时候也会生成class文件

inter Inter{
  public static final int NUM=3;
  public abstract void show();
}

class Test implements Inter{
    public  void show(){}
}

class InterfaceDeom{
  public static void main(String[] args){
     Test t=new Test();
	 System.out.println(t.NUM);
	 System.out.println(Test.NUM);
	 System.out.println(Inter.NUM);  //因为接口也是一个类，所以可以直接访问该类的常量
	 
	 t.NUM=4  //这时就不能赋值了，因为它是常量
	 	 
  }
}




13.接口2

接口：是不可以创建对象的，因为有抽象方法。
需要被子类实现，子类对接口中的抽象方法全部都覆盖后，子类才可以实例化。
否则子类是一个抽象类。

接口可以被类多实现，也是对多继承不支持的转换形式。java支持多实现。

