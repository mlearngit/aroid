1.finally

class Demo{
  int div(int a,int b) throws FushuException
  {
      if(b<0){
	    throw new FushuException("fu shu la");
	  }
      return a/b;
  }
}

class FushuException extends Exception{
    FushuException(String msg){
	   super(msg);
	}
}


public class ExceptionDemo5{
  public static void main(String[] args){
    Demo d=new Demo();
	try{
		int x=d.div(6,-2);
	    System.out.println("x="+x);
	}catch(FushuException e){
	   System.out.println(e.toString());
	   return;
	}
	finally{
		System.out.println("finally");  //finally里面存放的是一定会被执行的代码
	}
	
	System.out.println("over");
  }
}




finally 另一个说明例子
public void method() throws NoException
{
   连接数据库;
   操作数据;   // throw new SQLException()
   关闭数据库; //该操作无论数据是否操作成功，一定要关闭数据库
   
   
try{

连接数据库;
操作数据;   // throw new SQLException()

}catch(SQLException e){

   对会数据库进行处理 
   throw new NoException();  
   //注意：以上语句为什么没有直接把SQLException直接抛出，而是直接抛出一个更合理的NoException异常信息给调用者（可以参考前一节电脑冒烟的处理）
}
finally{

关闭数据库;
}
}


class NoException extends  Exception{
}





2. 异常-处理语句其它格式

这里工有三种格式：
第一种
try{

}catch(){

}


第二种

try{

}catch(){

}
finally{

}


第三种

try{

}
finally{

}
例子：
class Demo{
  pubic void method() throws Exception{
    try{
	   thorw new Exception();
	}
	finally(){
	  //关资源
	}
  }
  


记住：catch是用于处理异常，如果没有catch就代表异常没有被处理过，如果该异常是检测时异常，那么必须声明。
第三种格式可以这样理解:在出现异常的时候没有进行catch处理，只是把资源关闭了，至于问题就留给调用者去处理。




3.异常--覆盖时的异常特点

异常在子父类覆盖中的体现：
1.子类在覆盖父类时，如果父类的方法抛出异常，那么子类覆盖方法只能抛出父类的异常或者该异常的子类。
2.如果父类方法抛出多个异常，那么子类的覆盖该方法时，只能抛出父类异常的子集。
3.如果父类或者接口的方法中没有异常抛出，那么子类在覆盖方法时，也不可以抛出异常。
    如果子类方法发生了异常，就必须要进行try处理。绝对不能抛。
	
class AException extends Exception{
}

class BException extends AException{
}

class CException extends Exception{
}

/*
关系：

Exception
	|--AException
		|--BException
	|--CException
*/

class Fu{
  void show() throws AException
  {
  }
}

class Test{
  void function(Fu f){
    try{
	  f.show();
	}catch(AException e){
	}
  }
}

class Zi extends Fu{
  void show() throws CException
  {
  }
}

class Demo{
  public static void main(String[] args){
    Test t=new Test();
	t.function(new Fu());
	t.function(new Zi());  //此行代码会报错，因为Zi类抛出的是CException,在function方法的catch中不被AException识别
  }
}





4.异常练习

有一个圆形和长方形。
都可以获取面积。对于面积如果出现非法的数值，视为是获取面积出现问题。
问题通过异常来表示。
现有对这个程序进行基本设计。

注意:
拿长方形类来说，如果当用户输入的数值中有负值，这会导致程序计算面积时出错，
如果直接在代码里面通过if..else进行判断的话会让问题代码与普通代码混合在一块，不方查找。所以这里就需要把该问题进行封装对象
而且在这个程序中一旦面积计算有错时最好不要再执行后面的代码，这时需要让自定义异常类继承RuntimeException,而不是Exception

interface Shape{
   void getArea();
}

class NoValueException extends RuntimeException{
	NoValueException(String msg){
		super(msg);
	}
	
}


class Rec implements Shape{
   private int len,wid;
   
   Rec(int len,int wid)
   {
	   if(len<=0 || wid<=0)
		   throw new NoValueException("Rec chu cuo !!!!");

		 this.len=len;
		 this.wid=wid;
   }
   
   public void getArea(){
    System.out.println(len*wid);
   }
 
}


class Cicle implements Shape{
	int readis;
	public static final double PI=3.14;
	
	Cicle(int readis){
		if(readis<=0)
			throw new NoValueException("cicle not chu fu");
		
		this.readis=readis;
	}
	
	public void getArea(){
		System.out.println(readis*readis*PI);
	}
}




public class TestException{
  public static void main(String[] args){
	  
		Rec r=new Rec(3,7);
	    r.getArea(); 
		
		Cicle c=new Cicle(9);
		c.getArea();
		
		System.out.println("over");
      
  }
}



5.异常总结

异常：
是什么？是对问题的描述，将问题进行对象的封装


-------------------------


异常体系：
    Throwable
	    |--Error
		|--Exception
			|--RuntimeException

异常体系的特点：异常体系中的类以及建立的对象都具备可抛性。
                也就是说可以被throw和throws关键字所操作。
				只有异常体系具备这个特点。
				

				
---------------------



throw和throws的用法：

throw定义在函数内，用于抛出异常对象。
throws定义在函数上，用于抛出异常类，可以抛出多个用逗号隔开。

当函数内容有throw抛出异常对象，并未进行try处理。必须要在函数上声明，否则编译失败。
注意：RuntimeException除外。也就说，函数如果抛出的RuntimeException异常，函数上可以不用声明。


---------------------------



如果函数声明了异常，调用者需要进行处理。处理方法可以throw，也可try。

异常有两种：
   编译时被检测异常
     该异常在编译时，如果没有处理（没有抛也没有try），编译失败。
	 该异常被标识，代表这可以被处理。
   运行时异常（编译时不检测）
     在编译时，不需要处理，编译器不检查。
	 该异常的发生，建议不处理，让程序停止。需要对代码进行修正
	

------------------------

	
异常处理语句：
try
{
  需要被检测的代码；
}
catch()
{
  处理异常的代码；
}
finally
{
  一定会执行的代码； 
}

有三个结合格式：
1.
try
{

}
catch()
{
}

2.
try
{

}
finally
{

}

3.
try
{

}catch()
{

}
finally
{

}

注意：
1.finally中定义的通常是 关闭资源代码。因为资源必须释放。
2.finally只有一种情况不会执行。当执行到System.exit(0);finally不会执行


--------------------


自定义异常：
   定义类继承Exception或者RuntimeException
   1.为了让该自定义类具备可抛性。
   2.让该类具备操作异常的共性方法。
   
   当要定义自定义异常的信息时，可以使用父类已经定义好的功能。
   异常信息传递给父类的构造函数。
   class MyException extends Exception{
      MyException(String message){
	      super(message);
	  }
   }
   
自定义异常：按照java的面向对象思想，将程序中出现的特有问题进行封装。


-----------------------


异常的好处：
	1.将问题进行封装。
	2.将正常流程代码和问题处理代码相分享，方便于阅读。
	
异常的处理原则：
	1.处理方式有两种：try或者throws。
	2.调用到抛出异常的功能时，抛出几个，就处理几个。
	  一个try对应多个catch。
	3.多个catch，父类的catch放到最下面。
	4.catch内，需要定义针对性的处理方式，不要简单的定义printStackTrace，输出语句也不要不写
	  当捕获到的异常，本功能处理不了时，可以继续在catch中抛出。
	  try{
	     throw new AException();
	  }catch(AException e){
	     throw e;
	  }
	  
	  如果该异常处理不了，但并不属于该功能的异常。
	  可以将异常转换后，在抛出和该功能相关的异常。
	  
	  或者异常可以处理，当需要将异常产生的和本功能相关的问题提供出去，
	  让调用者知道 ，并处理。也可以将捕获异常处理后，转换新异常。
	  try{
	     throw new AException()；
	  }catch(AException e){
	    //对AException处理。
	     throw new BException();
	  }

	  
异常的注意事项：
	在子父类覆盖时：
	1.子类抛出的异常必须是父类的异常的子类或者子集。
	2.如果父类或者接口没有异常抛出时，子类覆盖出现异常，只能try不能抛。
	
参阅例子：
1.老师用电脑上课
2.图形面积





6.包package

	对类文件进行分类管理。
	给类提供多层命名空间。
	写在程序文件的第一行。
	类名的全称是 包名.类名
	包也是一种封装形式
	
总结：
    包与包之间进行访问，被访问的包中的类以及类中的成员，需要public修饰
	
	不同包中的子类还可以直接访问父类中被protected权限修饰的成员。
包与包之间可以使用的权限只有两种：public   protected

				public		protected		default		private
同一个类中		 ok            ok             ok         ok
同一个包中       ok            ok             ok
子类             ok            ok
不同包中	     ok	

为了简化类名的书写，使用一个关键字,import。
import 导入的是包中的类。
建议：不要写通配符 *  ，需要用到包中的哪个类，就导入哪个类

建立包名不要重复，可以使用url来完成定义
www.itcat.cn
package cn.itcast.demo  
或
package cn.itcast.test的形式 	


Java的压缩包
	方便项目的携带
	方便于使用，只要在classpath设置jar路径即可。
	数据库驱动，SSH框架等都是以jar包体现的。