1.System

import java.util.*;

class SystemDemo{
	public static void main(String[] args){
		Properties prop= System.getProperties();
	
		//因为Properties是Hashtable的子类，也就是Map集合的一个子类对象。
		//那么可以通过map的方法取出该集合中的元素。
		//该集合中存储都是字符串。没有泛型定义。
		
		
		
		
		//如何在系统中自定义一些特有信息呢？
		System.setProperty("mykey","myvalue");

		//获取指定属性信息。
		String value=System.getProperty("os.name");
		System.out.println("value="+value);		
		
		//可不要以在jvm启动时，动态加载一些属性信息呢？
		//如果在执行java命令时，语句为:java -Dhaha=qq SystemDemo ,则打印出v=qq，如果不指定值，则v=null
		String v=System.getProperty("haha");
		System.out.println("v="+v);
	/*
		//获取所有属性信息。
		for(Object obj : prop.keySet()){
			String value=(String)prop.get(obj);

			System.out.println(obj+"::"+value);
		}
	*/
	}
}




2.Runtime

Runtime对象
该类并没有提供构造函数。
说明不可以new对象。那么会直接想到该类中的方法都是静态的。
发现该类中还有非静态方法。
说明该类肯定会提供一个方法获取本类对象。而且该方法是静态的，并返回类型是本类类型。

由这个特点要以看出该类使用了单例设计模式完成。

该方式是static Runtime getRuntime();

class RuntimeDemo{
	public static void main(String[] args) throws Exception{
		Runtime r=Runtime.getRuntime();
		
		Process p=r.exec("notepad");
		//Process p=r.exec("notepad.exe  RuntimeDemo.java");

		Thread.sleep(4000);
		p.destroy();

	}
}




3.Date

import java.util.*;
import java.text.*;

class DateDemo{
	public static void main(String [] args){
		Date d=new Date();
		System.out.println(d);//打印的时间看不懂，希望有些格式。

		//将模式封装到SimpleDateFormat对象中。
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy年MM月dd日E hh:mm:ss");
		
		//调用format方法让模式格式第指定Date对象。
		String time=sdf.format(d);

		System.out.println("time="+time);
	}
}

result:
Sat Jul 09 20:42:48 CST 2016
time=2016年07月09日星期六 08:42:48




4.Calendar

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

public class CalendarDemo {

	public static void main(String[] args) {

		Calendar c=Calendar.getInstance();
		
		String[] mons={"一月","二月","三月","四月",
					   "五月","六月","七月","八月",
					   "九月","十月","十一月","十二月",};
		
		String[] weeks={"","星期日","星期一","星期二",
						"星期三","星期四","星期五","星期六"};
		
		int index=c.get(Calendar.MONTH);
		
		int index1=c.get(Calendar.DAY_OF_WEEK);
		
		sop(c.get(Calendar.YEAR)+"年");
		//sop((c.get(Calendar.MONTH)+1)+"月");
		sop(mons[index]);
		sop(c.get(Calendar.DAY_OF_MONTH)+"日");
		//sop("星期"+c.get(Calendar.DAY_OF_WEEK));
		sop(weeks[index1]);
//		Date d=new Date();
//		SimpleDateFormat  sdf=new SimpleDateFormat("yyyy");
//		String year=sdf.format(d);
//		System.out.println(year);
	
	}

	private static void sop(Object obj) {
		// TODO Auto-generated method stub
		System.out.println(obj);
	}

}



result:
2016年
七月
9日
星期六




import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

/**
 * 两个练习：
 * 1.获取任意年的二月有多少 天。
 * 思路：根据指定年设置一个时间就是
 * c.set(year,2,1);
 * c.add(Calendar.DAY_OF_MONTH,-1);//3月1日，往前推一天，就是2月最后一天
 * 
 * 
 * 2.获取昨天的现在这个时刻
 * c.add(Calenar.DAY_OF_MONTH,-1);
 * @author lili
 *
 */
public class CalendarDemo2 {

	public static void main(String[] args) {

		Calendar c=Calendar.getInstance();
		
		//c.set(2017, 2, 23);
		
		c.add(Calendar.DAY_OF_MONTH, -18);
		
		printCalendar(c);
		
	
	}

	public static void printCalendar(Calendar c){

		String[] mons={"一月","二月","三月","四月",
					   "五月","六月","七月","八月",
					   "九月","十月","十一月","十二月",};
		
		String[] weeks={"","星期日","星期一","星期二",
						"星期三","星期四","星期五","星期六"};
		
		int index=c.get(Calendar.MONTH);
		
		int index1=c.get(Calendar.DAY_OF_WEEK);
		
		sop(c.get(Calendar.YEAR)+"年");
		//sop((c.get(Calendar.MONTH)+1)+"月");
		sop(mons[index]);
		sop(c.get(Calendar.DAY_OF_MONTH)+"日");
		//sop("星期"+c.get(Calendar.DAY_OF_WEEK));
		sop(weeks[index1]);
		
	
	}
	private static void sop(Object obj) {
		// TODO Auto-generated method stub
		System.out.println(obj);
	}

}


result:
2016年
六月
21日
星期二








5.Math-Random

/*
 * 练习：给定一个小数，保留该小数的后两位。
 *  */
import java.util.Date;
import java.util.Random;

import java.text.*;

class MathDemo{
	
	public static void main(String[] args){
//		Random r=new Random();
//		for(int x=0;x<10;x++){
//			//int d=(int)(Math.random()*10+1);
//			int d=r.nextInt(10)+1;
//			sop(d);
//		}
		show();
	}

	
	public static void show(){
		double d=Math.ceil(16.34);//ceil返回大于指定数据的最小整数
		double d1=Math.floor(12.34);//floor返回小于指定数据的最大整数

		long l=Math.round(12.54);//四舍五入
		sop("d="+d);
		sop("d1="+d1);
		sop("l="+l);
		
		double d2=Math.pow(2, 3);
		sop("d2="+d2);
	}
	

	public static void sop(Object obj){
		System.out.println(obj);
	}
}








==========================================================




IO流





FileWriter

字符流和字节流：

字节流两个基类：
InputStream   OutputStream

字符流两个基类：
Reader  Writer

先学习一下字符流的特点。

既然IO流是用于操作数据的，
那么数据的最常见体现形式是:文件。

那么先以操作文件为主来演示。

需求：在硬盘上，创建一个文件并写入一些文字数据。

找到一个专门用于操作文件的Writer子类对象，FileWriter。后缀名是父类名，前缀名是该流对象的功能。

import java.io.*;

class FileWriterDemo{
	public static void main(String[] args)throws IOException{
	
		//创建一个FileWriter对象，该对象一被初始化就必须要明确被操作的文件。
		//而且该文件会被创建到指定目录下，如果该目录下已有同名文件，将被覆盖。
		//其实该步就是在明确数据要存放的目的地。
		FileWriter fw=new FileWriter("demo.txt");
		
		//调用Write方法，将字符串写入到流中。
		fw.write("abcdezzzzz44");
		
		//刷新流对象中的缓冲中的数据。
		//将数据刷到目的地中。
		//fw.flush();

		
		//关闭流资源，但是关闭之前会刷新一次内部的缓冲中的数据。
		//将数据刷到目的地中。
		//和flush区别：flush刷新后，流可以继续使用。close刷新后，会将流关闭。
		fw.close();
	}
}







IO异常处理方式

在创建对象、往流中写数据、关闭，这三个功能都会抛出IO异常
当把这三条语句都放在一个try里面，那么如果第一个当创建对象时就抛出异常，则不会运行close方法，这样就不会关闭资源。
因此需要将close放入finally中去执行

当第一条在创建对象时如果报出异常，那么就无法成功创建对象，导致在close时对象为空，因此需要对对象作非空判断。

当在try里面直接写入FileWriter fw=new FileWriter("Demo.txt"); 则在close时找不到fw对象，因此需要把引用定义到全局（对象放try里就行）

import java.io.*;

class FileWriterDemo2{
	public static void main(String[] args){
		FileWriter fw=null;
		try{

			fw=new FileWriter("Demo.txt");
			fw.write("abcde");

		}catch(IOException e){
			
			System.out.println("catch:"+e.toString());
		}
		finally{
			try{

				if(fw!=null)
					fw.close();

			}catch(IOException e){

				System.out.println(e.toString());
			
			}
		}	
	}
}








文件的续写

/*
演示对已有文件的数据续写
*/
import java.io.*;

class FileWriterDemo3{
	public static void main(String[] args) throws IOException{
		//传递一个true参数，代表不覆盖已有的文件，并在已有文件的末尾处进行数据续写。
		FileWriter fw=new FileWriter("Demo.txt",true);
		//注意：在windows系统中换行是用两个字符为表示，即\r\n，而linux中是用\n表示
		//如果在windows中也用\n，则用记事本打开时不会有效果。
		fw.write("aaa\r\nkkkkkkkkkkkk");

		fw.close();
	}
}





文本文件读取方式一

import java.io.*;

class FileWriterDemo4{
	public static void main(String[] args) throws IOException{
	
		//创建一个文件读取流对象，和指定名称的文件相关联。
		//要保证该文件是已经存在的，如果不存在，会发生异常FileNotFoundException
		FileReader fr=new FileReader("demo.txt");

		//调用读取流对象的read方法。
		//read():一次读一个字符，而且会自动往下读。
		
		int ch=0;

		while((ch=fr.read())!=-1){
			System.out.println((char)ch);
		}

	/*
		while(true){
			int ch=fr.read();
			if(ch==-1)
				break;
			System.out.println("ch="+(char)ch);
		}
	*/
		
	}
}





文本文件读取方式二

/*
第二种方式：通过字符数组进行读取
*/

import java.io.*;

class FileReaderDemo2{
	public static void main(String[] args)throws IOException{
		FileReader fr=new FileReader("demo.txt");

		//定义一个字符数组，用于存储读到字符。
		//该read(char[]) 返回的是读到字符个数。
		char[] buf=new char[1024];

		int num=0;
		while((num=fr.read(buf))!=-1){
			System.out.println(new String(buf,0,num));
		}

		fr.close();
	}
}



文本文件读取练习

//读取一个.java文件，并打印在控制台上。

import java.io.*;

class FileReaderDemo{
	public static void main(String[] args)throws IOException{
		FileReader fr=new FileReader("DateDemo.java");

		char[] buf=new char[1024];

		int num=0;

		//一执行fr.read(buf),则将Datedemo.java文件一次性全部读取到数组里面
		while((num=fr.read(buf))!=-1){
			System.out.println(new String(buf,0,num));
		}

		fr.close();
	}
}




拷贝文本文件

从C盘一个文本文件复制到D盘。

复制原理：
其实就是将C盘下的文件数据存储到D盘的一个文件中。

步骤：
1.在D盘创建一个文件，用于存储C盘文件中的数据。
2.定义读取流和C盘文件关联。
3.通过不断的读写完成数据存储。
4.关闭资源。


import java.io.*;

class CopyText{
	public static void main(String[] args) throws IOException{
		copy_2();
	}

	
	//从C盘读【一个】字符，就往D盘写一个字符。
	public static void copy_1()throws IOException{
	
		//创建目的地。
		FileWriter fw=new FileWriter("RuntimeDemo_copy.txt");

		//与已有文件关联。
		FileReader fr=new FileReader("RuntimeDemo.java");

		int ch=0;

		while((ch=fr.read())!=-1){
			fw.write(ch);
		}

		fw.close();
		fr.close();
	}


	public static void copy_2(){
		FileReader fr=null;
		FileWriter fw=null;
		try{
			fr=new FileReader("RuntimeDemo.java");
			fw=new FileWriter("RuntimeDemo_copy.txt");

			char[] buf=new char[1024];
			int len=0;
			while((len=fr.read(buf))!=-1){
				fw.write(buf,0,len);
			}

		}catch(IOException e){
			throw new  RuntimeException("du xie fail !");
		}
		finally{
			if(fr!=null){
				try{
					fr.close();
				}catch(IOException e){

				}

			}
			if(fw!=null){
				try{
					fw.close();
				}catch(IOException e){

				}

			}
		}
	}
}




(拷贝文本文件图例)
该图见桌面