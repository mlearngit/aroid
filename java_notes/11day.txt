1.多线程-概述

进程：是一个正在执行中的程序。
		每一个进程执行都有一个执行顺序。该顺序是一个执行路径，或者叫一个控制单元。

线程：就是进程中的一个独立的控制单元。
		线程在控制着进程的执行。

一个进程中至少有一个线程。

Java VM 启动的时候会有一个进程java.exe.

该进程中至少一个线程负责java程序的执行。
而且这个线程运行的代码存在于main方法中。
该线程称之为主线程。

扩展：其实更细节说明jvm，jvm启动不止一个线程，还有负责垃圾回收机制的线程。





2.创建线程-继承Thread类

1.如何在自定义的代码中，自定义一个线程呢？

通过对api的查找，java已经提供了对线程这类事物的描述，就Thread类。

创建线程的第一种方式：继承Thread类。
步骤：
1.定义类继承Thread
2.复写Thread类中的run方法。（目的：将自定义代码存储在run方法，让线程运行）
3.调用线程的start方法
	该方法两个作用：启动线程，调用run方法。
	
	
发现运行结果每一次都不同。
因为多个线程都获取cpu的执行权。cpu执行到谁，谁就运行。
明确一点，在某个时刻，只能有一个程序在运行（多核除外）。
cpu在做着快速的切换，以达到看上去是同时运行的效果。
我们可以形象把多线程的运行行为在互相抢夺cpu的执行权。

这就是多线程的一个特性：随机性。谁抢到谁执行，至于执行多长，cpu说了算





3.创建线程-run和start特点

为什么要覆盖run方法呢？

Thread类用于描述线程。
该类就定义了一个功能，用于存储线程要运行的代码。该存储功能就是run 方法。

也就是说Thread类中的run方法，用于存储线程要运行的代码。




4.线程练习

class Test extends Thread{
   private String name;
   Test(String name){
     this.name=name;
   }
   public void run(){
      for(int x=0;x<60;x++){
	    System.out.println(name+"_test_"+x);
	  }
      
   }
}

public class DemoThread{
  public static void main(String[] args){
    Test t1=new Test("one");//创建好一个线程
	Test t2=new Test("two");
	t1.start();//开启线程并执行该线程的run方法
	t2.start();
	//t1.run(); 仅仅是对象调用方法，而线程创建了，并没有运行
	 for(int x=0;x<60;x++){
	    System.out.println("main_"+x);
	  }
  }
}



6.获取线程对象以及名称 


原来线程都有自己默认的名称。
Thread-编号 该编号从0开始。

static Thread currentThread():获取当前线程对象。
getName()：获取线程名称。

设置线程名称：setName或者在构造函数调用super(name);

问题？在run的for循环中，两个线程运行时是使用的同一个x吗？
答：局部变量在每个线程对象中都有独立的一份

class Test extends Thread{

   Test(String name){
     super(name);
   }
   public void run(){
      for(int x=0;x<60;x++){
	    System.out.println(Thread.currentThread().getName()+"_test_"+x);//前面也可以写成this.getName();
	  }
      
   }
}

public class ThreadDemo{
  public static void main(String[] args){
    Test t1=new Test("one----");
	Test t2=new Test("two++++");
	t1.start();
	t2.start();
	
	 for(int x=0;x<60;x++){
	    System.out.println("main_"+x);
	  }
  }
}


7.售票的例子

需求：简单的卖票程序 。
多个窗口同时卖票

class Ticket extends Thread{
  //private int tick=100;        //这样会有400张票来卖，那怎么办呢
  private static int tick=100;   //这可以解决问题，但一般不用静态，原因是静态的生命周期太长
  public void run(){
	while(true){
	  if(tick>0){
	    System.out.println(Thread.currentThread().getName()+"sale :"+tick--);
	  }
	}
  }
}

class TicketDemo{
  public static void main(String[] args){
	 Ticket t1=new Ticket();
	 Ticket t2=new Ticket();
	 Ticket t3=new Ticket();
	 Ticket t4=new Ticket();
	 
	 t1.start();
	 t2.start();
	 t3.start();
	 t4.start();
  }
}





8.创建线程--实现Runnable接口


创建线程的第二种方式：实现Runnable接口

步骤：
1.定义类实现Runnable接口。
2.覆盖Runnable接口中的run方法
	将线程要运行的代码存放在该run方法中。
3.通过Thread类建立线程对象。
4.将Runnable接口的子类对象作为实际参数传递给Thread类的构造函数。
	为什么要将Runnable接口的子类对象传递给Thread的构造函数？
	因为，自定义的run方法所属的对象是Runnable接口的子类对象。
	所以要让线程去执行指定对象的run方法。
5.调用Thread类的start方法开启线程并调用Runnable接口子类的run方法。

实现方式和继承方式有什么区别呢？
实现方式好处：避免了单继承的局限性。
在定义线程时，建议使用实现方式


两种方式区别：
继承Thread:线程代码存放Thread子类run方法中。
实现Runnable，线程代码存在接口的子类的run方法。

class Ticket implements Runnable  //extends Thread
{
  private int tick=100;        

  public void run(){
	while(true){
	  if(tick>0){
	    System.out.println(Thread.currentThread().getName()+"sale :"+tick--);
	  }
	}
  }
}

class TicketDemo{
  public static void main(String[] args){
	 Ticket t=new Ticket();
	 
	 Thread t1=new Thread(t);
	 Thread t2=new Thread(t);
	 Thread t3=new Thread(t);
	 Thread t4=new Thread(t);
	 
	 t1.start();
	 t2.start();
	 t3.start();
	 t4.start();
  }
}






9.多线程的安全问题

通过分析，发现，打印出0，-1，-2等错票。

多线程的运行出现安全问题。

问题的原因：
	当多条语句在操作同一个线程共享数据时，一个线程对多条语句只执行了一部分，还没有执行完，
	另一个线程参与进行执行，导致共享数据的错误。
	
解决办法;
	对多条操作共享数据的语句，只能让一个线程都执行完。在执行过程中，其它线程不可以参与执行。
	
Java对于多线程的安全问题提供了专业的解决方式。

就是同步代码块。

synchronized(对象){
   需要被同步的代码
}

注意：在判断需要被同步的代码，就看哪些语句在操作共享数据，就同步哪些语句。

class Ticket implements Runnable{
  private int tick=100;
  Object obj=new Object();
  public void run(){
    while(true){
		synchronized(obj){
			if(tick>0){
			try{Thread.sleep(20);}catch(InterruptedException e){}
			System.out.println(Thread.currentThread().getName()+"sale.."+tick--);
	   }
		}
	} 
  }
}

class TicketDemo2{
  public static void main(String[] args){
    Ticket t=new Ticket();
	
	Thread t1=new Thread(t);
	Thread t2=new Thread(t);
	Thread t3=new Thread(t);
	Thread t4=new Thread(t);
	
	t1.start();
	t2.start();
	t3.start();
	t4.start();
  }
}


不加同步代码块时的执行结果：
Thread-1sale..8
Thread-0sale..7
Thread-2sale..6
Thread-3sale..5
Thread-1sale..4
Thread-0sale..3
Thread-2sale..2
Thread-3sale..1
Thread-1sale..0
Thread-0sale..-2
Thread-2sale..-1




10.多线程同步代码块（原理）

对象如同锁。 持有锁的线程可以在同步中执行。
没有持有锁的线程即使获取cpu的执行权，也进不去，因为没有获取锁。

火车上的卫生间--经典

同步的前提：
1.必须要有两个或者两个以上的线程。
2.必须是多个线程使用同一个锁。

好处：解决了多线程的安全问题。

弊端：多个线程需要判断锁，较为消耗资源。

可以把synchroized中对象理解为一把锁，当线程判断该锁是打开的，就进去运行，此时其它线程无法进入，




11.多线程-同步函数

需求:
银行有一个金库。
有两个储户分别存300元，每次存100，存3次。

目的：该程序是否有安全问题，如果有，如何解决？

如何找问题：
1.明确哪些代码是多线程运行代码。
2.明确共享数据。
3.明确多线程运行代码中哪些语句是操作共享数据的。


同步有两种表现形式;
1.同步代码块
2.同步函数

class Bank{
   private int num;
   Object obj=new Object();
/*  
  public void add(int n){
	  synchronized(obj){
		try{Thread.sleep(20);}catch(Exception e){}
		num=num+n;
		System.out.println("num="+num);
	}
  }
*/

  public synchronized void add(int n){    //这是同步函数
	  
	try{Thread.sleep(20);}catch(Exception e){}
	num=num+n;
	System.out.println("num="+num);	
  }
}

class Cur implements Runnable{
   private Bank b=new Bank();
   public void run(){
	   for(int x=0;x<3;x++){
		b.add(100);   
	   }	
   }
}

class BankDemo{
	public static void main(String[] args){
	   Cur c=new Cur();
	   
	   Thread t1=new Thread(c);
	   Thread t2=new Thread(c);
	   
	   t1.start();
	   t2.start();
	}
}



12.同步函数的锁是this



同步函数用的是哪一个锁呢？
函数需要被对象调用 ，那么函数都有一个所属对象引用，就是this。
所以同步函数使用的锁是this。

通过两个线程来卖票
一个线程在同步代码块中。
一个线程在同步函数中。‘
都在执行买票动作。


class Ticket implements Runnable{
  private int tick=100;
   boolean flag=true;
  Object obj=new Object();
  
  public void run(){
	if(flag){
		while(true){
			synchronized(this){
				if(tick>0){
				  try{Thread.sleep(20);}catch(Exception e){}
				  System.out.println(Thread.currentThread().getName()+"code..."+tick--);
				}
			}	
		}
	}else{
		show();
	}
  }
  
  public synchronized void show(){
	while(true){
		if(tick>0){
			try{Thread.sleep(20);}catch(Exception e){}
			System.out.println(Thread.currentThread().getName()+"show...."+tick--);	
		}
	}
  }
}

class TicketDemo3{
 public static void main(String[] args){
   Ticket t=new Ticket();
   
   Thread t1=new Thread(t);
   Thread t2=new Thread(t);
   
   t1.start();
   try{Thread.sleep(20);}catch(Exception e){}
   t.flag=false;
   t2.start();
 }
}





13.多线程-静态同步函数的锁是Class对象




如果同步函数被静态修饰后，使用的锁是什么呢？

通过验证，发现不再是this。因为静态方法中也不可以定义this。

静态进内存时，内存中没有本类对象，但是一定有该类对应的字节码文件对象。
类名.class 该对象的类型是Class

静态的同步方法，使用的锁是该方法所在类的字节码文件对象。 

class Ticket implements Runnable{
  private static int tick=100;
   boolean flag=true;
  Object obj=new Object();
  
  public void run(){
	if(flag){
		while(true){
			synchronized(Ticket.class){
				if(tick>0){
				  try{Thread.sleep(20);}catch(Exception e){}
				  System.out.println(Thread.currentThread().getName()+"code..."+tick--);
				}
			}	
		}
	}else{
		show();
	}
  }
  
  public static synchronized void show(){
	while(true){
		if(tick>0){
			try{Thread.sleep(20);}catch(Exception e){}
			System.out.println(Thread.currentThread().getName()+"show...."+tick--);	
		}
	}
  }
}

class TicketDemo3{
 public static void main(String[] args){
   Ticket t=new Ticket();
   
   Thread t1=new Thread(t);
   Thread t2=new Thread(t);
   
   t1.start();
   try{Thread.sleep(20);}catch(Exception e){}
   t.flag=false;
   t2.start();
 }
}



14.多线程-单例设计模式-懒汉式


饿汉式：

class Single{
  private static final Single s=new Single();
  private Single(){}
  public static Single getInstance(){
	return s;
  }
}


懒汉式：

class Single{
  private static Single s=null;
  private Single(){};
  public static Single getInstance(){
	if(s==null){
		synchronized(Single.class){
			if(s==null){
				s=new Single();
			}
		}
	}
	return s;
  }
  
}



15.多线程-死锁


第一个例子：

class Ticket implements Runnable{
  private int tick=100;
  boolean flag=true;
  Object obj=new Object();
	  public void run(){
		if(flag){
			while(true){
				synchronized(obj){
					show();
				}		
			}
		}else{
			while(true){
				show();
			}
		}		 
	}
	
	public synchronized void show(){
		synchronized(obj){
					if(tick>0){
						try{Thread.sleep(20);}catch(Exception e){}
						System.out.println(Thread.currentThread().getName()+" code sale... "+tick--);
					}
				}
		
	}
}

class DeadLockDemo{
   public static void main(String[] args){
      Ticket t=new Ticket();
	  
	  Thread t1=new Thread(t);
	  Thread t2=new Thread(t);
	  Thread t3=new Thread(t);
	  t1.start();
	  try{Thread.sleep(20);}catch(Exception e){}
	  t.flag=false;
	  t2.start();
	  t3.start();
   }
}



第二个例子;

class Test implements Runnable{
   boolean flag;
   Test(boolean flag){
		this.flag=flag;
   }
   
	   public void run(){
			if(flag){
				synchronized(LockObj.locka){
					
					System.out.println("if locka");
					
					synchronized(LockObj.lockb){
						
						System.out.println("if lockb");
					}
				}
			}else{
				synchronized(LockObj.lockb){
					
					System.out.println("else lockb");
					
					synchronized(LockObj.locka){
						
						System.out.println("else locka");
					}
				
			}
		}
	}
}
class LockObj{
    static Object locka=new Object();
	static Object lockb=new Object();
}


class DeadLockDemo2{
	
	public static void main(String[] args){
		Test test1=new Test(true);
		Test test2=new Test(false);
		
		Thread t1=new Thread(test1);
		Thread t2=new Thread(test2);
		
		t1.start();
		t2.start();
	}
}